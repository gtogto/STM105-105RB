
STM105-105RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034dc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003798  08003798  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a0  080037a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080037a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000074  0800381c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  0800381c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4fb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1c  00000000  00000000  0002a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fc4  00000000  00000000  0002d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a250  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae667  00000000  00000000  0003a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c1c  00000000  00000000  000e8ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	080036a8 	.word	0x080036a8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	080036a8 	.word	0x080036a8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_UART_RxCpltCallback>:
/*############################################################################*/

/*############################################################################*/
/*uart interrupt test*/ //gto

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a3e      	ldr	r2, [pc, #248]	; (8000624 <HAL_UART_RxCpltCallback+0x108>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10a      	bne.n	8000544 <HAL_UART_RxCpltCallback+0x28>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.
			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	493d      	ldr	r1, [pc, #244]	; (8000628 <HAL_UART_RxCpltCallback+0x10c>)
 8000532:	483e      	ldr	r0, [pc, #248]	; (800062c <HAL_UART_RxCpltCallback+0x110>)
 8000534:	f001 ff15 	bl	8002362 <HAL_UART_Receive_IT>

	        // Send the received data.
			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 8000538:	230a      	movs	r3, #10
 800053a:	2201      	movs	r2, #1
 800053c:	493a      	ldr	r1, [pc, #232]	; (8000628 <HAL_UART_RxCpltCallback+0x10c>)
 800053e:	483b      	ldr	r0, [pc, #236]	; (800062c <HAL_UART_RxCpltCallback+0x110>)
 8000540:	f001 fe7d 	bl	800223e <HAL_UART_Transmit>
	}

	if (huart->Instance == USART2) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a39      	ldr	r2, [pc, #228]	; (8000630 <HAL_UART_RxCpltCallback+0x114>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d163      	bne.n	8000616 <HAL_UART_RxCpltCallback+0xfa>
			//debugPrintln(&huart2, "uart1 interrupt! ");
			// When one data is received, an interrupt is generated.
			HAL_UART_Receive_IT(&huart2, &rxdata, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	4938      	ldr	r1, [pc, #224]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 8000552:	4839      	ldr	r0, [pc, #228]	; (8000638 <HAL_UART_RxCpltCallback+0x11c>)
 8000554:	f001 ff05 	bl	8002362 <HAL_UART_Receive_IT>

			// Send the received data.
			//HAL_UART_Transmit(&huart2, &rx_data, 1, 10);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1); // LED GREEN ON
 8000558:	2201      	movs	r2, #1
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	4837      	ldr	r0, [pc, #220]	; (800063c <HAL_UART_RxCpltCallback+0x120>)
 800055e:	f001 f879 	bl	8001654 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0); // GPIO OUTPUT LOW
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0); // GPIO OUTPUT LOW
			}
			*/

			switch(status){
 8000562:	4b37      	ldr	r3, [pc, #220]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d002      	beq.n	8000570 <HAL_UART_RxCpltCallback+0x54>
 800056a:	2b02      	cmp	r3, #2
 800056c:	d011      	beq.n	8000592 <HAL_UART_RxCpltCallback+0x76>
					}
					break ;
			}

	}
}
 800056e:	e055      	b.n	800061c <HAL_UART_RxCpltCallback+0x100>
					if( rxdata == START_CODE ) {
 8000570:	4b30      	ldr	r3, [pc, #192]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b3c      	cmp	r3, #60	; 0x3c
 8000576:	d150      	bne.n	800061a <HAL_UART_RxCpltCallback+0xfe>
						rxd[0] = START_CODE ;
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 800057a:	223c      	movs	r2, #60	; 0x3c
 800057c:	701a      	strb	r2, [r3, #0]
						rx_cnt = 1 ;
 800057e:	4b32      	ldr	r3, [pc, #200]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
						status = PAYLOAD ;
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 8000586:	2202      	movs	r2, #2
 8000588:	701a      	strb	r2, [r3, #0]
						uart2_key_Flag = 0 ;
 800058a:	4b30      	ldr	r3, [pc, #192]	; (800064c <HAL_UART_RxCpltCallback+0x130>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
					break ;
 8000590:	e043      	b.n	800061a <HAL_UART_RxCpltCallback+0xfe>
					if( rxdata == START_CODE ) {
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b3c      	cmp	r3, #60	; 0x3c
 8000598:	d109      	bne.n	80005ae <HAL_UART_RxCpltCallback+0x92>
						rxd[0] = START_CODE ;
 800059a:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 800059c:	223c      	movs	r2, #60	; 0x3c
 800059e:	701a      	strb	r2, [r3, #0]
						rx_cnt = 1 ;
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
						status = PAYLOAD ;
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
					break ;
 80005ac:	e036      	b.n	800061c <HAL_UART_RxCpltCallback+0x100>
					else if( rxdata == END_CODE ) {
 80005ae:	4b21      	ldr	r3, [pc, #132]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b3e      	cmp	r3, #62	; 0x3e
 80005b4:	d115      	bne.n	80005e2 <HAL_UART_RxCpltCallback+0xc6>
						if( rx_cnt == (LENGTH-1) )  {
 80005b6:	4b24      	ldr	r3, [pc, #144]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b0f      	cmp	r3, #15
 80005bc:	d10d      	bne.n	80005da <HAL_UART_RxCpltCallback+0xbe>
							rxd[rx_cnt++] = rxdata ;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	b2d1      	uxtb	r1, r2
 80005c6:	4a20      	ldr	r2, [pc, #128]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005c8:	7011      	strb	r1, [r2, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 80005ce:	7819      	ldrb	r1, [r3, #0]
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005d2:	5499      	strb	r1, [r3, r2]
							uart2_key_Flag = 1 ;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_UART_RxCpltCallback+0x130>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
						status = START ;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
					break ;
 80005e0:	e01c      	b.n	800061c <HAL_UART_RxCpltCallback+0x100>
						if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b11      	cmp	r3, #17
 80005e8:	d80b      	bhi.n	8000602 <HAL_UART_RxCpltCallback+0xe6>
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	b2d1      	uxtb	r1, r2
 80005f2:	4a15      	ldr	r2, [pc, #84]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005f4:	7011      	strb	r1, [r2, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 80005fa:	7819      	ldrb	r1, [r3, #0]
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005fe:	5499      	strb	r1, [r3, r2]
					break ;
 8000600:	e00c      	b.n	800061c <HAL_UART_RxCpltCallback+0x100>
							status = START ;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
							rx_cnt = 0 ;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
							uart2_key_Flag = 0 ;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_UART_RxCpltCallback+0x130>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
					break ;
 8000614:	e002      	b.n	800061c <HAL_UART_RxCpltCallback+0x100>
	}
 8000616:	bf00      	nop
 8000618:	e000      	b.n	800061c <HAL_UART_RxCpltCallback+0x100>
					break ;
 800061a:	bf00      	nop
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40013800 	.word	0x40013800
 8000628:	200000e8 	.word	0x200000e8
 800062c:	200000a4 	.word	0x200000a4
 8000630:	40004400 	.word	0x40004400
 8000634:	200000a1 	.word	0x200000a1
 8000638:	20000144 	.word	0x20000144
 800063c:	40011000 	.word	0x40011000
 8000640:	20000001 	.word	0x20000001
 8000644:	20000188 	.word	0x20000188
 8000648:	200000a0 	.word	0x200000a0
 800064c:	20000090 	.word	0x20000090

08000650 <_write>:
/*############################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	b29a      	uxth	r2, r3
 8000660:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000664:	68b9      	ldr	r1, [r7, #8]
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <_write+0x28>)
 8000668:	f001 fde9 	bl	800223e <HAL_UART_Transmit>
	return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000a4 	.word	0x200000a4

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fbb1 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f85b 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f94f 	bl	800092c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800068e:	f000 f8f7 	bl	8000880 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000692:	f000 f8bf 	bl	8000814 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000696:	f000 f91f 	bl	80008d8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800069a:	f000 f89f 	bl	80007dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, SYNC_EN, 1); // GPIO PB14 OUTPUT HIGH -> SYNC_EN
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a4:	481c      	ldr	r0, [pc, #112]	; (8000718 <main+0x9c>)
 80006a6:	f000 ffd5 	bl	8001654 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, STM_TX_EN, 0); // GPIO PB14 OUTPUT HIGH -> SYNC_EN
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <main+0x9c>)
 80006b2:	f000 ffcf 	bl	8001654 <HAL_GPIO_WritePin>
  printf("\r\n ### START STM32F105 Slave Board ### \r\n");
 80006b6:	4819      	ldr	r0, [pc, #100]	; (800071c <main+0xa0>)
 80006b8:	f002 fba2 	bl	8002e00 <puts>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1); // LED RED ON
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <main+0xa4>)
 80006c4:	f000 ffc6 	bl	8001654 <HAL_GPIO_WritePin>

  //HAL_UART_Receive_IT(&huart1, &rx_data, 1);
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1); // interrupt uart 2
 80006c8:	2201      	movs	r2, #1
 80006ca:	4916      	ldr	r1, [pc, #88]	; (8000724 <main+0xa8>)
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <main+0xac>)
 80006ce:	f001 fe48 	bl	8002362 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_UART_Transmit(&huart1, (uint8_t *)&uart1_4M, 2, 10);
 80006d2:	230a      	movs	r3, #10
 80006d4:	2202      	movs	r2, #2
 80006d6:	4915      	ldr	r1, [pc, #84]	; (800072c <main+0xb0>)
 80006d8:	4815      	ldr	r0, [pc, #84]	; (8000730 <main+0xb4>)
 80006da:	f001 fdb0 	bl	800223e <HAL_UART_Transmit>
	//DWT_Delay_us(1000000);

	if(uart2_key_Flag)
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <main+0xb8>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f5      	beq.n	80006d2 <main+0x56>
	{
		  uart2_key_Flag = 0;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <main+0xb8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <main+0xbc>)
 80006ee:	f002 fb87 	bl	8002e00 <puts>
		  if (LENGTH == 16){
			  HAL_UART_Transmit(&huart2, (uint8_t *) &rxd[i], 1, 10);
		  }
		  */

		  for (int i = 0; i < LENGTH; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	e00a      	b.n	800070e <main+0x92>
			  HAL_UART_Transmit(&huart2, (uint8_t *) &rxd[i], 1, 10);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <main+0xc0>)
 80006fc:	1899      	adds	r1, r3, r2
 80006fe:	230a      	movs	r3, #10
 8000700:	2201      	movs	r2, #1
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <main+0xac>)
 8000704:	f001 fd9b 	bl	800223e <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3301      	adds	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	ddf1      	ble.n	80006f8 <main+0x7c>
	HAL_UART_Transmit(&huart1, (uint8_t *)&uart1_4M, 2, 10);
 8000714:	e7dd      	b.n	80006d2 <main+0x56>
 8000716:	bf00      	nop
 8000718:	40010c00 	.word	0x40010c00
 800071c:	080036c0 	.word	0x080036c0
 8000720:	40011000 	.word	0x40011000
 8000724:	200000a1 	.word	0x200000a1
 8000728:	20000144 	.word	0x20000144
 800072c:	20000000 	.word	0x20000000
 8000730:	200000a4 	.word	0x200000a4
 8000734:	20000090 	.word	0x20000090
 8000738:	080036ec 	.word	0x080036ec
 800073c:	20000188 	.word	0x20000188

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	2238      	movs	r2, #56	; 0x38
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fae0 	bl	8002d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000782:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0318 	add.w	r3, r7, #24
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ff77 	bl	8001684 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800079c:	f000 f92c 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fa78 	bl	8001cb0 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007c6:	f000 f917 	bl	80009f8 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80007ca:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <SystemClock_Config+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	42420070 	.word	0x42420070

080007dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2005      	movs	r0, #5
 80007e6:	f000 fc38 	bl	800105a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80007ea:	2005      	movs	r0, #5
 80007ec:	f000 fc51 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2025      	movs	r0, #37	; 0x25
 80007f6:	f000 fc30 	bl	800105a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fa:	2025      	movs	r0, #37	; 0x25
 80007fc:	f000 fc49 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2026      	movs	r0, #38	; 0x26
 8000806:	f000 fc28 	bl	800105a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800080a:	2026      	movs	r0, #38	; 0x26
 800080c:	f000 fc41 	bl	8001092 <HAL_NVIC_EnableIRQ>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_SPI1_Init+0x64>)
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <MX_SPI1_Init+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI1_Init+0x64>)
 800083e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000842:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SPI1_Init+0x64>)
 8000846:	2208      	movs	r2, #8
 8000848:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SPI1_Init+0x64>)
 800085e:	220a      	movs	r2, #10
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_SPI1_Init+0x64>)
 8000864:	f001 fc1a 	bl	800209c <HAL_SPI_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 800086e:	f000 f8c3 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000ec 	.word	0x200000ec
 800087c:	40013000 	.word	0x40013000

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
#endif
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 7000000; //115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <MX_USART1_UART_Init+0x54>)
 800088e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a4:	220c      	movs	r2, #12
 80008a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008b4:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f001 fc74 	bl	80021a4 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f899 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000a4 	.word	0x200000a4
 80008d0:	40013800 	.word	0x40013800
 80008d4:	006acfc0 	.word	0x006acfc0

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f001 fc48 	bl	80021a4 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f86d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000144 	.word	0x20000144
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000940:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <MX_GPIO_Init+0xc0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a29      	ldr	r2, [pc, #164]	; (80009ec <MX_GPIO_Init+0xc0>)
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_GPIO_Init+0xc0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_GPIO_Init+0xc0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a23      	ldr	r2, [pc, #140]	; (80009ec <MX_GPIO_Init+0xc0>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_GPIO_Init+0xc0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_GPIO_Init+0xc0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <MX_GPIO_Init+0xc0>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_GPIO_Init+0xc0>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_GPIO_Init+0xc0>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <MX_GPIO_Init+0xc0>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_GPIO_Init+0xc0>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_GPIO_Init+0xc4>)
 80009a8:	f000 fe54 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80009ac:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_GPIO_Init+0xc8>)
 80009c2:	f000 fcc3 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80009c6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xc4>)
 80009e0:	f000 fcb4 	bl	800134c <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_MspInit+0x5c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <HAL_MspInit+0x5c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x5c>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x5c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /* Peripheral interrupt init */

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_MspInit+0x60>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_MspInit+0x60>)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010000 	.word	0x40010000

08000a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d12f      	bne.n	8000ae8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ab8:	23a0      	movs	r3, #160	; 0xa0
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <HAL_SPI_MspInit+0x90>)
 8000acc:	f000 fc3e 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_SPI_MspInit+0x90>)
 8000ae4:	f000 fc32 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40013000 	.word	0x40013000
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010800 	.word	0x40010800

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a37      	ldr	r2, [pc, #220]	; (8000bf4 <HAL_UART_MspInit+0xf8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d132      	bne.n	8000b82 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a35      	ldr	r2, [pc, #212]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a2f      	ldr	r2, [pc, #188]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0318 	add.w	r3, r7, #24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4826      	ldr	r0, [pc, #152]	; (8000bfc <HAL_UART_MspInit+0x100>)
 8000b62:	f000 fbf3 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4820      	ldr	r0, [pc, #128]	; (8000bfc <HAL_UART_MspInit+0x100>)
 8000b7c:	f000 fbe6 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b80:	e034      	b.n	8000bec <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <HAL_UART_MspInit+0x104>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d12f      	bne.n	8000bec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b96:	61d3      	str	r3, [r2, #28]
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0xfc>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <HAL_UART_MspInit+0x100>)
 8000bd0:	f000 fbbc 	bl	800134c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_UART_MspInit+0x100>)
 8000be8:	f000 fbb0 	bl	800134c <HAL_GPIO_Init>
}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	40004400 	.word	0x40004400

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 f913 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
	...

08000c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART1_IRQHandler+0x10>)
 8000c66:	f001 fbad 	bl	80023c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000a4 	.word	0x200000a4

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f001 fba3 	bl	80023c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000144 	.word	0x20000144

08000c88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e00a      	b.n	8000cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9a:	f3af 8000 	nop.w
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf0      	blt.n	8000c9a <_read+0x12>
	}

return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce8:	605a      	str	r2, [r3, #4]
	return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
	return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f001 ffb4 	bl	8002cc0 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20010000 	.word	0x20010000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	20000094 	.word	0x20000094
 8000d8c:	200001c8 	.word	0x200001c8

08000d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dc2:	f7ff ffe5 	bl	8000d90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dc6:	f001 ff81 	bl	8002ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dca:	f7ff fc57 	bl	800067c <main>
  bx lr
 8000dce:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dd8:	080037a8 	.word	0x080037a8
  ldr r2, =_sbss
 8000ddc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000de0:	200001c4 	.word	0x200001c4

08000de4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x28>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x28>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f923 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fdfe 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f93b 	bl	80010ae <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f903 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_IncTick+0x1c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_IncTick+0x20>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <HAL_IncTick+0x20>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	200001b0 	.word	0x200001b0

08000e98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <HAL_GetTick+0x10>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	200001b0 	.word	0x200001b0

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4906      	ldr	r1, [pc, #24]	; (8000f44 <__NVIC_EnableIRQ+0x34>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff90 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff2d 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff42 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff90 	bl	8000f9c <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5f 	bl	8000f48 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff35 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa2 	bl	8001000 <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d008      	beq.n	80010ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2204      	movs	r2, #4
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e020      	b.n	8001130 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 020e 	bic.w	r2, r2, #14
 80010fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
	...

0800113c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800114e:	2b02      	cmp	r3, #2
 8001150:	d005      	beq.n	800115e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2204      	movs	r2, #4
 8001156:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e0d6      	b.n	800130c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 020e 	bic.w	r2, r2, #14
 800116c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	4b64      	ldr	r3, [pc, #400]	; (8001318 <HAL_DMA_Abort_IT+0x1dc>)
 8001186:	429a      	cmp	r2, r3
 8001188:	d958      	bls.n	800123c <HAL_DMA_Abort_IT+0x100>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a63      	ldr	r2, [pc, #396]	; (800131c <HAL_DMA_Abort_IT+0x1e0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d04f      	beq.n	8001234 <HAL_DMA_Abort_IT+0xf8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a61      	ldr	r2, [pc, #388]	; (8001320 <HAL_DMA_Abort_IT+0x1e4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d048      	beq.n	8001230 <HAL_DMA_Abort_IT+0xf4>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a60      	ldr	r2, [pc, #384]	; (8001324 <HAL_DMA_Abort_IT+0x1e8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d040      	beq.n	800122a <HAL_DMA_Abort_IT+0xee>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a5e      	ldr	r2, [pc, #376]	; (8001328 <HAL_DMA_Abort_IT+0x1ec>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d038      	beq.n	8001224 <HAL_DMA_Abort_IT+0xe8>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a5d      	ldr	r2, [pc, #372]	; (800132c <HAL_DMA_Abort_IT+0x1f0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d030      	beq.n	800121e <HAL_DMA_Abort_IT+0xe2>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <HAL_DMA_Abort_IT+0x1f4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d028      	beq.n	8001218 <HAL_DMA_Abort_IT+0xdc>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a53      	ldr	r2, [pc, #332]	; (8001318 <HAL_DMA_Abort_IT+0x1dc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d020      	beq.n	8001212 <HAL_DMA_Abort_IT+0xd6>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_DMA_Abort_IT+0x1f8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_DMA_Abort_IT+0xd2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a56      	ldr	r2, [pc, #344]	; (8001338 <HAL_DMA_Abort_IT+0x1fc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d012      	beq.n	800120a <HAL_DMA_Abort_IT+0xce>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a54      	ldr	r2, [pc, #336]	; (800133c <HAL_DMA_Abort_IT+0x200>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00a      	beq.n	8001204 <HAL_DMA_Abort_IT+0xc8>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a53      	ldr	r2, [pc, #332]	; (8001340 <HAL_DMA_Abort_IT+0x204>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d102      	bne.n	80011fe <HAL_DMA_Abort_IT+0xc2>
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	e01b      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 80011fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001202:	e018      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 8001204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001208:	e015      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 800120a:	2310      	movs	r3, #16
 800120c:	e013      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 800120e:	2301      	movs	r3, #1
 8001210:	e011      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 8001212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001216:	e00e      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 8001218:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121c:	e00b      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 800121e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001222:	e008      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	e005      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	e002      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 8001230:	2310      	movs	r3, #16
 8001232:	e000      	b.n	8001236 <HAL_DMA_Abort_IT+0xfa>
 8001234:	2301      	movs	r3, #1
 8001236:	4a43      	ldr	r2, [pc, #268]	; (8001344 <HAL_DMA_Abort_IT+0x208>)
 8001238:	6053      	str	r3, [r2, #4]
 800123a:	e057      	b.n	80012ec <HAL_DMA_Abort_IT+0x1b0>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a36      	ldr	r2, [pc, #216]	; (800131c <HAL_DMA_Abort_IT+0x1e0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d04f      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x1aa>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <HAL_DMA_Abort_IT+0x1e4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d048      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x1a6>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_DMA_Abort_IT+0x1e8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d040      	beq.n	80012dc <HAL_DMA_Abort_IT+0x1a0>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <HAL_DMA_Abort_IT+0x1ec>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d038      	beq.n	80012d6 <HAL_DMA_Abort_IT+0x19a>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a30      	ldr	r2, [pc, #192]	; (800132c <HAL_DMA_Abort_IT+0x1f0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d030      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x194>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <HAL_DMA_Abort_IT+0x1f4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d028      	beq.n	80012ca <HAL_DMA_Abort_IT+0x18e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_DMA_Abort_IT+0x1dc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d020      	beq.n	80012c4 <HAL_DMA_Abort_IT+0x188>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2b      	ldr	r2, [pc, #172]	; (8001334 <HAL_DMA_Abort_IT+0x1f8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d019      	beq.n	80012c0 <HAL_DMA_Abort_IT+0x184>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a29      	ldr	r2, [pc, #164]	; (8001338 <HAL_DMA_Abort_IT+0x1fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d012      	beq.n	80012bc <HAL_DMA_Abort_IT+0x180>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a28      	ldr	r2, [pc, #160]	; (800133c <HAL_DMA_Abort_IT+0x200>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d00a      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x17a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_DMA_Abort_IT+0x204>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d102      	bne.n	80012b0 <HAL_DMA_Abort_IT+0x174>
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	e01b      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b4:	e018      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ba:	e015      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012bc:	2310      	movs	r3, #16
 80012be:	e013      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e011      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012c8:	e00e      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012ce:	e00b      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	e008      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	e005      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	e002      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012e2:	2310      	movs	r3, #16
 80012e4:	e000      	b.n	80012e8 <HAL_DMA_Abort_IT+0x1ac>
 80012e6:	2301      	movs	r3, #1
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_DMA_Abort_IT+0x20c>)
 80012ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
    } 
  }
  return status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020080 	.word	0x40020080
 800131c:	40020008 	.word	0x40020008
 8001320:	4002001c 	.word	0x4002001c
 8001324:	40020030 	.word	0x40020030
 8001328:	40020044 	.word	0x40020044
 800132c:	40020058 	.word	0x40020058
 8001330:	4002006c 	.word	0x4002006c
 8001334:	40020408 	.word	0x40020408
 8001338:	4002041c 	.word	0x4002041c
 800133c:	40020430 	.word	0x40020430
 8001340:	40020444 	.word	0x40020444
 8001344:	40020400 	.word	0x40020400
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b08b      	sub	sp, #44	; 0x2c
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e169      	b.n	8001634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001360:	2201      	movs	r2, #1
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8158 	bne.w	800162e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a9a      	ldr	r2, [pc, #616]	; (80015ec <HAL_GPIO_Init+0x2a0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d05e      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 8001388:	4a98      	ldr	r2, [pc, #608]	; (80015ec <HAL_GPIO_Init+0x2a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d875      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 800138e:	4a98      	ldr	r2, [pc, #608]	; (80015f0 <HAL_GPIO_Init+0x2a4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d058      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 8001394:	4a96      	ldr	r2, [pc, #600]	; (80015f0 <HAL_GPIO_Init+0x2a4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d86f      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 800139a:	4a96      	ldr	r2, [pc, #600]	; (80015f4 <HAL_GPIO_Init+0x2a8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d052      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013a0:	4a94      	ldr	r2, [pc, #592]	; (80015f4 <HAL_GPIO_Init+0x2a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d869      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013a6:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <HAL_GPIO_Init+0x2ac>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d04c      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013ac:	4a92      	ldr	r2, [pc, #584]	; (80015f8 <HAL_GPIO_Init+0x2ac>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d863      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013b2:	4a92      	ldr	r2, [pc, #584]	; (80015fc <HAL_GPIO_Init+0x2b0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d046      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013b8:	4a90      	ldr	r2, [pc, #576]	; (80015fc <HAL_GPIO_Init+0x2b0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d85d      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d82a      	bhi.n	8001418 <HAL_GPIO_Init+0xcc>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d859      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <HAL_GPIO_Init+0x80>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001421 	.word	0x08001421
 80013d4:	08001433 	.word	0x08001433
 80013d8:	08001475 	.word	0x08001475
 80013dc:	0800147b 	.word	0x0800147b
 80013e0:	0800147b 	.word	0x0800147b
 80013e4:	0800147b 	.word	0x0800147b
 80013e8:	0800147b 	.word	0x0800147b
 80013ec:	0800147b 	.word	0x0800147b
 80013f0:	0800147b 	.word	0x0800147b
 80013f4:	0800147b 	.word	0x0800147b
 80013f8:	0800147b 	.word	0x0800147b
 80013fc:	0800147b 	.word	0x0800147b
 8001400:	0800147b 	.word	0x0800147b
 8001404:	0800147b 	.word	0x0800147b
 8001408:	0800147b 	.word	0x0800147b
 800140c:	0800147b 	.word	0x0800147b
 8001410:	08001429 	.word	0x08001429
 8001414:	0800143d 	.word	0x0800143d
 8001418:	4a79      	ldr	r2, [pc, #484]	; (8001600 <HAL_GPIO_Init+0x2b4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141e:	e02c      	b.n	800147a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e029      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	3304      	adds	r3, #4
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e024      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	3308      	adds	r3, #8
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e01f      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	330c      	adds	r3, #12
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e01a      	b.n	800147c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144e:	2304      	movs	r3, #4
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e013      	b.n	800147c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d105      	bne.n	8001468 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145c:	2308      	movs	r3, #8
 800145e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	611a      	str	r2, [r3, #16]
          break;
 8001466:	e009      	b.n	800147c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001468:	2308      	movs	r3, #8
 800146a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	615a      	str	r2, [r3, #20]
          break;
 8001472:	e003      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x130>
          break;
 800147a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2bff      	cmp	r3, #255	; 0xff
 8001480:	d801      	bhi.n	8001486 <HAL_GPIO_Init+0x13a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	e001      	b.n	800148a <HAL_GPIO_Init+0x13e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d802      	bhi.n	8001498 <HAL_GPIO_Init+0x14c>
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x152>
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	3b08      	subs	r3, #8
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	210f      	movs	r1, #15
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	6a39      	ldr	r1, [r7, #32]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	431a      	orrs	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80b1 	beq.w	800162e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014cc:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_GPIO_Init+0x2bc>)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a40      	ldr	r2, [pc, #256]	; (800160c <HAL_GPIO_Init+0x2c0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d013      	beq.n	8001538 <HAL_GPIO_Init+0x1ec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00d      	beq.n	8001534 <HAL_GPIO_Init+0x1e8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3e      	ldr	r2, [pc, #248]	; (8001614 <HAL_GPIO_Init+0x2c8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1e4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3d      	ldr	r2, [pc, #244]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_GPIO_Init+0x1e0>
 8001528:	2303      	movs	r3, #3
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 800152c:	2304      	movs	r3, #4
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001538:	2300      	movs	r3, #0
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154a:	492f      	ldr	r1, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x2bc>)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	492c      	ldr	r1, [pc, #176]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	4928      	ldr	r1, [pc, #160]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800157c:	4013      	ands	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4922      	ldr	r1, [pc, #136]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	491e      	ldr	r1, [pc, #120]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	4918      	ldr	r1, [pc, #96]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d021      	beq.n	8001620 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	490e      	ldr	r1, [pc, #56]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
 80015e8:	e021      	b.n	800162e <HAL_GPIO_Init+0x2e2>
 80015ea:	bf00      	nop
 80015ec:	10320000 	.word	0x10320000
 80015f0:	10310000 	.word	0x10310000
 80015f4:	10220000 	.word	0x10220000
 80015f8:	10210000 	.word	0x10210000
 80015fc:	10120000 	.word	0x10120000
 8001600:	10110000 	.word	0x10110000
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00
 8001614:	40011000 	.word	0x40011000
 8001618:	40011400 	.word	0x40011400
 800161c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	43db      	mvns	r3, r3
 8001628:	4909      	ldr	r1, [pc, #36]	; (8001650 <HAL_GPIO_Init+0x304>)
 800162a:	4013      	ands	r3, r2
 800162c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	f47f ae8e 	bne.w	8001360 <HAL_GPIO_Init+0x14>
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	372c      	adds	r7, #44	; 0x2c
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001670:	e003      	b.n	800167a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e304      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e2de      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fb9a 	bl	8000e98 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fb96 	bl	8000e98 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e292      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fb86 	bl	8000e98 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fb82 	bl	8000e98 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e27e      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e252      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fb3b 	bl	8000e98 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fb37 	bl	8000e98 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e233      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fb1a 	bl	8000e98 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb16 	bl	8000e98 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e212      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fafa 	bl	8000e98 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff faf6 	bl	8000e98 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1f2      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 fbca 	bl	8002060 <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fae0 	bl	8000e98 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fadc 	bl	8000e98 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1d8      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b9b      	ldr	r3, [pc, #620]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b94      	ldr	r3, [pc, #592]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b91      	ldr	r3, [pc, #580]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a90      	ldr	r2, [pc, #576]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b8e      	ldr	r3, [pc, #568]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b8b      	ldr	r3, [pc, #556]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a87      	ldr	r2, [pc, #540]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fa9d 	bl	8000e98 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fa99 	bl	8000e98 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e195      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a77      	ldr	r2, [pc, #476]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a72      	ldr	r2, [pc, #456]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a6f      	ldr	r2, [pc, #444]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b6a      	ldr	r3, [pc, #424]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a69      	ldr	r2, [pc, #420]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a66      	ldr	r2, [pc, #408]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a63      	ldr	r2, [pc, #396]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b61      	ldr	r3, [pc, #388]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fa4d 	bl	8000e98 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fa49 	bl	8000e98 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e143      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa37 	bl	8000e98 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fa33 	bl	8000e98 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e12d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a44      	ldr	r2, [pc, #272]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 808c 	beq.w	8001b84 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d10e      	bne.n	8001a98 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d108      	bne.n	8001a98 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e103      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d14e      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001aac:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0ef      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <HAL_RCC_OscConfig+0x4f0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f9e7 	bl	8000e98 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001ace:	f7ff f9e3 	bl	8000e98 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0df      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af8:	491c      	ldr	r1, [pc, #112]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4918      	ldr	r1, [pc, #96]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_RCC_OscConfig+0x4f0>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f9bf 	bl	8000e98 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001b1e:	f7ff f9bb 	bl	8000e98 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0b7      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x49a>
 8001b3c:	e022      	b.n	8001b84 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_OscConfig+0x4f0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f9a2 	bl	8000e98 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001b56:	e00f      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001b58:	f7ff f99e 	bl	8000e98 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d908      	bls.n	8001b78 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e09a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40007000 	.word	0x40007000
 8001b74:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001b78:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e9      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8088 	beq.w	8001c9e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d068      	beq.n	8001c6c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d14d      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f976 	bl	8000e98 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f972 	bl	8000e98 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e06e      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4931      	ldr	r1, [pc, #196]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f023 020f 	bic.w	r2, r3, #15
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	492d      	ldr	r1, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	4927      	ldr	r1, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff f93f 	bl	8000e98 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff f93b 	bl	8000e98 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e037      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x59a>
 8001c3c:	e02f      	b.n	8001c9e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff f928 	bl	8000e98 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f924 	bl	8000e98 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e020      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c8>
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e013      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	42420060 	.word	0x42420060

08001cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0d0      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d910      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4965      	ldr	r1, [pc, #404]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d040      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e073      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06b      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4936      	ldr	r1, [pc, #216]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7ff f87a 	bl	8000e98 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff f876 	bl	8000e98 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e053      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d210      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 0207 	bic.w	r2, r3, #7
 8001de6:	4922      	ldr	r1, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	490a      	ldr	r1, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1cc>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ffd8 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	0800371c 	.word	0x0800371c
 8001e7c:	20000004 	.word	0x20000004
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	b091      	sub	sp, #68	; 0x44
 8001e88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001e8a:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e8c:	f107 0414 	add.w	r4, r7, #20
 8001e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e92:	c407      	stmia	r4!, {r0, r1, r2}
 8001e94:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001e96:	4b54      	ldr	r3, [pc, #336]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e98:	1d3c      	adds	r4, r7, #4
 8001e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ebc:	4b4b      	ldr	r3, [pc, #300]	; (8001fec <HAL_RCC_GetSysClockFreq+0x168>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d002      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x4e>
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d003      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x54>
 8001ed0:	e080      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ed6:	e080      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d066      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001ef6:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <HAL_RCC_GetSysClockFreq+0x168>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f02:	4413      	add	r3, r2
 8001f04:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001f0a:	4b38      	ldr	r3, [pc, #224]	; (8001fec <HAL_RCC_GetSysClockFreq+0x168>)
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d044      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCC_GetSysClockFreq+0x168>)
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	3301      	adds	r3, #1
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_GetSysClockFreq+0x168>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3302      	adds	r3, #2
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	4618      	mov	r0, r3
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	fb02 f501 	mul.w	r5, r2, r1
 8001f46:	fb00 f403 	mul.w	r4, r0, r3
 8001f4a:	442c      	add	r4, r5
 8001f4c:	fba0 2302 	umull	r2, r3, r0, r2
 8001f50:	18e1      	adds	r1, r4, r3
 8001f52:	460b      	mov	r3, r1
 8001f54:	4926      	ldr	r1, [pc, #152]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001f56:	fb01 f003 	mul.w	r0, r1, r3
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	fb01 f102 	mul.w	r1, r1, r2
 8001f60:	4401      	add	r1, r0
 8001f62:	4823      	ldr	r0, [pc, #140]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001f64:	fba2 4500 	umull	r4, r5, r2, r0
 8001f68:	194b      	adds	r3, r1, r5
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f04f 0100 	mov.w	r1, #0
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	461a      	mov	r2, r3
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	fb02 fc01 	mul.w	ip, r2, r1
 8001f80:	fb00 f603 	mul.w	r6, r0, r3
 8001f84:	4466      	add	r6, ip
 8001f86:	fba0 2302 	umull	r2, r3, r0, r2
 8001f8a:	18f1      	adds	r1, r6, r3
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe f947 	bl	8000224 <__aeabi_uldivmod>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f9e:	e007      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001fa4:	fb02 f203 	mul.w	r2, r2, r3
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001fb0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8001fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc2:	e004      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x170>)
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8001fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x174>)
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3744      	adds	r7, #68	; 0x44
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe4:	080036fc 	.word	0x080036fc
 8001fe8:	0800370c 	.word	0x0800370c
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	00b71b00 	.word	0x00b71b00
 8001ff4:	003d0900 	.word	0x003d0900
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <HAL_RCC_GetHCLKFreq+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002014:	f7ff fff2 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	0800372c 	.word	0x0800372c

08002038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800203c:	f7ff ffde 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0adb      	lsrs	r3, r3, #11
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <HAL_RCC_GetPCLK2Freq+0x24>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	0800372c 	.word	0x0800372c

08002060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <RCC_Delay+0x34>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <RCC_Delay+0x38>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0a5b      	lsrs	r3, r3, #9
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800207c:	bf00      	nop
  }
  while (Delay --);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e5a      	subs	r2, r3, #1
 8002082:	60fa      	str	r2, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <RCC_Delay+0x1c>
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000004 	.word	0x20000004
 8002098:	10624dd3 	.word	0x10624dd3

0800209c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e076      	b.n	800219c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020be:	d009      	beq.n	80020d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
 80020c6:	e005      	b.n	80020d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fcba 	bl	8000a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800210a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	ea42 0103 	orr.w	r1, r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	0c1a      	lsrs	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f002 0204 	and.w	r2, r2, #4
 800217a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e03f      	b.n	8002236 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fc96 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	; 0x24
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fc85 	bl	8002af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800220c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800221c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b08a      	sub	sp, #40	; 0x28
 8002242:	af02      	add	r7, sp, #8
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b20      	cmp	r3, #32
 800225c:	d17c      	bne.n	8002358 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_UART_Transmit+0x2c>
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e075      	b.n	800235a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_UART_Transmit+0x3e>
 8002278:	2302      	movs	r3, #2
 800227a:	e06e      	b.n	800235a <HAL_UART_Transmit+0x11c>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2221      	movs	r2, #33	; 0x21
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002292:	f7fe fe01 	bl	8000e98 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	88fa      	ldrh	r2, [r7, #6]
 80022a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ac:	d108      	bne.n	80022c0 <HAL_UART_Transmit+0x82>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	e003      	b.n	80022c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022d0:	e02a      	b.n	8002328 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2200      	movs	r2, #0
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa38 	bl	8002752 <UART_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e036      	b.n	800235a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002300:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	3302      	adds	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	e007      	b.n	800231a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	3301      	adds	r3, #1
 8002318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1cf      	bne.n	80022d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	2140      	movs	r1, #64	; 0x40
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fa08 	bl	8002752 <UART_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e006      	b.n	800235a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002358:	2302      	movs	r3, #2
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	4613      	mov	r3, r2
 800236e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b20      	cmp	r3, #32
 800237a:	d11d      	bne.n	80023b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_UART_Receive_IT+0x26>
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e016      	b.n	80023ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_UART_Receive_IT+0x38>
 8002396:	2302      	movs	r3, #2
 8002398:	e00f      	b.n	80023ba <HAL_UART_Receive_IT+0x58>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fa19 	bl	80027e6 <UART_Start_Receive_IT>
 80023b4:	4603      	mov	r3, r0
 80023b6:	e000      	b.n	80023ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10d      	bne.n	8002416 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_UART_IRQHandler+0x52>
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fac9 	bl	80029a6 <UART_Receive_IT>
      return;
 8002414:	e17b      	b.n	800270e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80b1 	beq.w	8002580 <HAL_UART_IRQHandler+0x1bc>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_UART_IRQHandler+0x70>
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80a6 	beq.w	8002580 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_UART_IRQHandler+0x90>
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_UART_IRQHandler+0xb0>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f043 0202 	orr.w	r2, r3, #2
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_UART_IRQHandler+0xd0>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00f      	beq.n	80024be <HAL_UART_IRQHandler+0xfa>
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <HAL_UART_IRQHandler+0xee>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f043 0208 	orr.w	r2, r3, #8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 811e 	beq.w	8002704 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_UART_IRQHandler+0x11e>
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fa62 	bl	80029a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <HAL_UART_IRQHandler+0x146>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d031      	beq.n	800256e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f9a4 	bl	8002858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d023      	beq.n	8002566 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	2b00      	cmp	r3, #0
 8002534:	d013      	beq.n	800255e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	4a76      	ldr	r2, [pc, #472]	; (8002714 <HAL_UART_IRQHandler+0x350>)
 800253c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fdfa 	bl	800113c <HAL_DMA_Abort_IT>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002558:	4610      	mov	r0, r2
 800255a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255c:	e00e      	b.n	800257c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8e3 	bl	800272a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	e00a      	b.n	800257c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8df 	bl	800272a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	e006      	b.n	800257c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8db 	bl	800272a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800257a:	e0c3      	b.n	8002704 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257c:	bf00      	nop
    return;
 800257e:	e0c1      	b.n	8002704 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	2b01      	cmp	r3, #1
 8002586:	f040 80a1 	bne.w	80026cc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 809b 	beq.w	80026cc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8095 	beq.w	80026cc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d04e      	beq.n	8002664 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80025d0:	8a3b      	ldrh	r3, [r7, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8098 	beq.w	8002708 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025dc:	8a3a      	ldrh	r2, [r7, #16]
 80025de:	429a      	cmp	r2, r3
 80025e0:	f080 8092 	bcs.w	8002708 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8a3a      	ldrh	r2, [r7, #16]
 80025e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d02b      	beq.n	800264c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002602:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002622:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0210 	bic.w	r2, r2, #16
 8002640:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fd3d 	bl	80010c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	b29b      	uxth	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f86d 	bl	800273c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002662:	e051      	b.n	8002708 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800266c:	b29b      	uxth	r3, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d047      	beq.n	800270c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800267c:	8a7b      	ldrh	r3, [r7, #18]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d044      	beq.n	800270c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002690:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0210 	bic.w	r2, r2, #16
 80026be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026c0:	8a7b      	ldrh	r3, [r7, #18]
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f839 	bl	800273c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026ca:	e01f      	b.n	800270c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_UART_IRQHandler+0x324>
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8f9 	bl	80028d8 <UART_Transmit_IT>
    return;
 80026e6:	e012      	b.n	800270e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <HAL_UART_IRQHandler+0x34a>
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f93a 	bl	8002976 <UART_EndTransmit_IT>
    return;
 8002702:	e004      	b.n	800270e <HAL_UART_IRQHandler+0x34a>
    return;
 8002704:	bf00      	nop
 8002706:	e002      	b.n	800270e <HAL_UART_IRQHandler+0x34a>
      return;
 8002708:	bf00      	nop
 800270a:	e000      	b.n	800270e <HAL_UART_IRQHandler+0x34a>
      return;
 800270c:	bf00      	nop
  }
}
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	080028b1 	.word	0x080028b1

08002718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002762:	e02c      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d028      	beq.n	80027be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <UART_WaitOnFlagUntilTimeout+0x30>
 8002772:	f7fe fb91 	bl	8000e98 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	429a      	cmp	r2, r3
 8002780:	d21d      	bcs.n	80027be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002790:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e00f      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d0c3      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	4613      	mov	r3, r2
 80027f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2222      	movs	r2, #34	; 0x22
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0220 	orr.w	r2, r2, #32
 800284a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800286e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0210 	bic.w	r2, r2, #16
 8002896:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff ff2d 	bl	800272a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b21      	cmp	r3, #33	; 0x21
 80028ea:	d13e      	bne.n	800296a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f4:	d114      	bne.n	8002920 <UART_Transmit_IT+0x48>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d110      	bne.n	8002920 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002912:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	621a      	str	r2, [r3, #32]
 800291e:	e008      	b.n	8002932 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	1c59      	adds	r1, r3, #1
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6211      	str	r1, [r2, #32]
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29b      	uxth	r3, r3
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4619      	mov	r1, r3
 8002940:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002954:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002964:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff febe 	bl	8002718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b22      	cmp	r3, #34	; 0x22
 80029b8:	f040 8099 	bne.w	8002aee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d117      	bne.n	80029f6 <UART_Receive_IT+0x50>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	1c9a      	adds	r2, r3, #2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
 80029f4:	e026      	b.n	8002a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d007      	beq.n	8002a1a <UART_Receive_IT+0x74>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <UART_Receive_IT+0x82>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e008      	b.n	8002a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d148      	bne.n	8002aea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0220 	bic.w	r2, r2, #32
 8002a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d123      	bne.n	8002ae0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0210 	bic.w	r2, r2, #16
 8002aac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d10a      	bne.n	8002ad2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fe2f 	bl	800273c <HAL_UARTEx_RxEventCallback>
 8002ade:	e002      	b.n	8002ae6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fd fd1b 	bl	800051c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e002      	b.n	8002af0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b38:	f023 030c 	bic.w	r3, r3, #12
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a55      	ldr	r2, [pc, #340]	; (8002cb8 <UART_SetConfig+0x1c0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d103      	bne.n	8002b6e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b66:	f7ff fa67 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	e002      	b.n	8002b74 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b6e:	f7ff fa4f 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8002b72:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7c:	d14c      	bne.n	8002c18 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009a      	lsls	r2, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	0119      	lsls	r1, r3, #4
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009a      	lsls	r2, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb4:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2064      	movs	r0, #100	; 0x64
 8002bbe:	fb00 f303 	mul.w	r3, r0, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	3332      	adds	r3, #50	; 0x32
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bd6:	4419      	add	r1, r3
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002bf0:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2064      	movs	r0, #100	; 0x64
 8002bf8:	fb00 f303 	mul.w	r3, r0, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 0207 	and.w	r2, r3, #7
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	440a      	add	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8002c16:	e04a      	b.n	8002cae <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	0119      	lsls	r1, r3, #4
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c50:	fba3 0302 	umull	r0, r3, r3, r2
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	2064      	movs	r0, #100	; 0x64
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	3332      	adds	r3, #50	; 0x32
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6e:	4419      	add	r1, r3
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009a      	lsls	r2, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c88:	fba3 0302 	umull	r0, r3, r3, r2
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	2064      	movs	r0, #100	; 0x64
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	3332      	adds	r3, #50	; 0x32
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	f003 020f 	and.w	r2, r3, #15
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	440a      	add	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	51eb851f 	.word	0x51eb851f

08002cc0 <__errno>:
 8002cc0:	4b01      	ldr	r3, [pc, #4]	; (8002cc8 <__errno+0x8>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000010 	.word	0x20000010

08002ccc <__libc_init_array>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	2600      	movs	r6, #0
 8002cd0:	4d0c      	ldr	r5, [pc, #48]	; (8002d04 <__libc_init_array+0x38>)
 8002cd2:	4c0d      	ldr	r4, [pc, #52]	; (8002d08 <__libc_init_array+0x3c>)
 8002cd4:	1b64      	subs	r4, r4, r5
 8002cd6:	10a4      	asrs	r4, r4, #2
 8002cd8:	42a6      	cmp	r6, r4
 8002cda:	d109      	bne.n	8002cf0 <__libc_init_array+0x24>
 8002cdc:	f000 fce4 	bl	80036a8 <_init>
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	4d0a      	ldr	r5, [pc, #40]	; (8002d0c <__libc_init_array+0x40>)
 8002ce4:	4c0a      	ldr	r4, [pc, #40]	; (8002d10 <__libc_init_array+0x44>)
 8002ce6:	1b64      	subs	r4, r4, r5
 8002ce8:	10a4      	asrs	r4, r4, #2
 8002cea:	42a6      	cmp	r6, r4
 8002cec:	d105      	bne.n	8002cfa <__libc_init_array+0x2e>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf4:	4798      	blx	r3
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7ee      	b.n	8002cd8 <__libc_init_array+0xc>
 8002cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfe:	4798      	blx	r3
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7f2      	b.n	8002cea <__libc_init_array+0x1e>
 8002d04:	080037a0 	.word	0x080037a0
 8002d08:	080037a0 	.word	0x080037a0
 8002d0c:	080037a0 	.word	0x080037a0
 8002d10:	080037a4 	.word	0x080037a4

08002d14 <memset>:
 8002d14:	4603      	mov	r3, r0
 8002d16:	4402      	add	r2, r0
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d100      	bne.n	8002d1e <memset+0xa>
 8002d1c:	4770      	bx	lr
 8002d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d22:	e7f9      	b.n	8002d18 <memset+0x4>

08002d24 <_puts_r>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	460e      	mov	r6, r1
 8002d28:	4605      	mov	r5, r0
 8002d2a:	b118      	cbz	r0, 8002d34 <_puts_r+0x10>
 8002d2c:	6983      	ldr	r3, [r0, #24]
 8002d2e:	b90b      	cbnz	r3, 8002d34 <_puts_r+0x10>
 8002d30:	f000 fa48 	bl	80031c4 <__sinit>
 8002d34:	69ab      	ldr	r3, [r5, #24]
 8002d36:	68ac      	ldr	r4, [r5, #8]
 8002d38:	b913      	cbnz	r3, 8002d40 <_puts_r+0x1c>
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f000 fa42 	bl	80031c4 <__sinit>
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <_puts_r+0xd0>)
 8002d42:	429c      	cmp	r4, r3
 8002d44:	d120      	bne.n	8002d88 <_puts_r+0x64>
 8002d46:	686c      	ldr	r4, [r5, #4]
 8002d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d4a:	07db      	lsls	r3, r3, #31
 8002d4c:	d405      	bmi.n	8002d5a <_puts_r+0x36>
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	0598      	lsls	r0, r3, #22
 8002d52:	d402      	bmi.n	8002d5a <_puts_r+0x36>
 8002d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d56:	f000 fad3 	bl	8003300 <__retarget_lock_acquire_recursive>
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	0719      	lsls	r1, r3, #28
 8002d5e:	d51d      	bpl.n	8002d9c <_puts_r+0x78>
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	b1db      	cbz	r3, 8002d9c <_puts_r+0x78>
 8002d64:	3e01      	subs	r6, #1
 8002d66:	68a3      	ldr	r3, [r4, #8]
 8002d68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	60a3      	str	r3, [r4, #8]
 8002d70:	bb39      	cbnz	r1, 8002dc2 <_puts_r+0x9e>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da38      	bge.n	8002de8 <_puts_r+0xc4>
 8002d76:	4622      	mov	r2, r4
 8002d78:	210a      	movs	r1, #10
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f000 f848 	bl	8002e10 <__swbuf_r>
 8002d80:	3001      	adds	r0, #1
 8002d82:	d011      	beq.n	8002da8 <_puts_r+0x84>
 8002d84:	250a      	movs	r5, #10
 8002d86:	e011      	b.n	8002dac <_puts_r+0x88>
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <_puts_r+0xd4>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d101      	bne.n	8002d92 <_puts_r+0x6e>
 8002d8e:	68ac      	ldr	r4, [r5, #8]
 8002d90:	e7da      	b.n	8002d48 <_puts_r+0x24>
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <_puts_r+0xd8>)
 8002d94:	429c      	cmp	r4, r3
 8002d96:	bf08      	it	eq
 8002d98:	68ec      	ldreq	r4, [r5, #12]
 8002d9a:	e7d5      	b.n	8002d48 <_puts_r+0x24>
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f000 f888 	bl	8002eb4 <__swsetup_r>
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d0dd      	beq.n	8002d64 <_puts_r+0x40>
 8002da8:	f04f 35ff 	mov.w	r5, #4294967295
 8002dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dae:	07da      	lsls	r2, r3, #31
 8002db0:	d405      	bmi.n	8002dbe <_puts_r+0x9a>
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	059b      	lsls	r3, r3, #22
 8002db6:	d402      	bmi.n	8002dbe <_puts_r+0x9a>
 8002db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dba:	f000 faa2 	bl	8003302 <__retarget_lock_release_recursive>
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	da04      	bge.n	8002dd0 <_puts_r+0xac>
 8002dc6:	69a2      	ldr	r2, [r4, #24]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dc06      	bgt.n	8002dda <_puts_r+0xb6>
 8002dcc:	290a      	cmp	r1, #10
 8002dce:	d004      	beq.n	8002dda <_puts_r+0xb6>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	6022      	str	r2, [r4, #0]
 8002dd6:	7019      	strb	r1, [r3, #0]
 8002dd8:	e7c5      	b.n	8002d66 <_puts_r+0x42>
 8002dda:	4622      	mov	r2, r4
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f000 f817 	bl	8002e10 <__swbuf_r>
 8002de2:	3001      	adds	r0, #1
 8002de4:	d1bf      	bne.n	8002d66 <_puts_r+0x42>
 8002de6:	e7df      	b.n	8002da8 <_puts_r+0x84>
 8002de8:	250a      	movs	r5, #10
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	6022      	str	r2, [r4, #0]
 8002df0:	701d      	strb	r5, [r3, #0]
 8002df2:	e7db      	b.n	8002dac <_puts_r+0x88>
 8002df4:	08003758 	.word	0x08003758
 8002df8:	08003778 	.word	0x08003778
 8002dfc:	08003738 	.word	0x08003738

08002e00 <puts>:
 8002e00:	4b02      	ldr	r3, [pc, #8]	; (8002e0c <puts+0xc>)
 8002e02:	4601      	mov	r1, r0
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	f7ff bf8d 	b.w	8002d24 <_puts_r>
 8002e0a:	bf00      	nop
 8002e0c:	20000010 	.word	0x20000010

08002e10 <__swbuf_r>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	460e      	mov	r6, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	4605      	mov	r5, r0
 8002e18:	b118      	cbz	r0, 8002e22 <__swbuf_r+0x12>
 8002e1a:	6983      	ldr	r3, [r0, #24]
 8002e1c:	b90b      	cbnz	r3, 8002e22 <__swbuf_r+0x12>
 8002e1e:	f000 f9d1 	bl	80031c4 <__sinit>
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <__swbuf_r+0x98>)
 8002e24:	429c      	cmp	r4, r3
 8002e26:	d12b      	bne.n	8002e80 <__swbuf_r+0x70>
 8002e28:	686c      	ldr	r4, [r5, #4]
 8002e2a:	69a3      	ldr	r3, [r4, #24]
 8002e2c:	60a3      	str	r3, [r4, #8]
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	071a      	lsls	r2, r3, #28
 8002e32:	d52f      	bpl.n	8002e94 <__swbuf_r+0x84>
 8002e34:	6923      	ldr	r3, [r4, #16]
 8002e36:	b36b      	cbz	r3, 8002e94 <__swbuf_r+0x84>
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	b2f6      	uxtb	r6, r6
 8002e3e:	1ac0      	subs	r0, r0, r3
 8002e40:	6963      	ldr	r3, [r4, #20]
 8002e42:	4637      	mov	r7, r6
 8002e44:	4283      	cmp	r3, r0
 8002e46:	dc04      	bgt.n	8002e52 <__swbuf_r+0x42>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f000 f926 	bl	800309c <_fflush_r>
 8002e50:	bb30      	cbnz	r0, 8002ea0 <__swbuf_r+0x90>
 8002e52:	68a3      	ldr	r3, [r4, #8]
 8002e54:	3001      	adds	r0, #1
 8002e56:	3b01      	subs	r3, #1
 8002e58:	60a3      	str	r3, [r4, #8]
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	6022      	str	r2, [r4, #0]
 8002e60:	701e      	strb	r6, [r3, #0]
 8002e62:	6963      	ldr	r3, [r4, #20]
 8002e64:	4283      	cmp	r3, r0
 8002e66:	d004      	beq.n	8002e72 <__swbuf_r+0x62>
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	07db      	lsls	r3, r3, #31
 8002e6c:	d506      	bpl.n	8002e7c <__swbuf_r+0x6c>
 8002e6e:	2e0a      	cmp	r6, #10
 8002e70:	d104      	bne.n	8002e7c <__swbuf_r+0x6c>
 8002e72:	4621      	mov	r1, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 f911 	bl	800309c <_fflush_r>
 8002e7a:	b988      	cbnz	r0, 8002ea0 <__swbuf_r+0x90>
 8002e7c:	4638      	mov	r0, r7
 8002e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <__swbuf_r+0x9c>)
 8002e82:	429c      	cmp	r4, r3
 8002e84:	d101      	bne.n	8002e8a <__swbuf_r+0x7a>
 8002e86:	68ac      	ldr	r4, [r5, #8]
 8002e88:	e7cf      	b.n	8002e2a <__swbuf_r+0x1a>
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <__swbuf_r+0xa0>)
 8002e8c:	429c      	cmp	r4, r3
 8002e8e:	bf08      	it	eq
 8002e90:	68ec      	ldreq	r4, [r5, #12]
 8002e92:	e7ca      	b.n	8002e2a <__swbuf_r+0x1a>
 8002e94:	4621      	mov	r1, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	f000 f80c 	bl	8002eb4 <__swsetup_r>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d0cb      	beq.n	8002e38 <__swbuf_r+0x28>
 8002ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8002ea4:	e7ea      	b.n	8002e7c <__swbuf_r+0x6c>
 8002ea6:	bf00      	nop
 8002ea8:	08003758 	.word	0x08003758
 8002eac:	08003778 	.word	0x08003778
 8002eb0:	08003738 	.word	0x08003738

08002eb4 <__swsetup_r>:
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <__swsetup_r+0xcc>)
 8002eb6:	b570      	push	{r4, r5, r6, lr}
 8002eb8:	681d      	ldr	r5, [r3, #0]
 8002eba:	4606      	mov	r6, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	b125      	cbz	r5, 8002eca <__swsetup_r+0x16>
 8002ec0:	69ab      	ldr	r3, [r5, #24]
 8002ec2:	b913      	cbnz	r3, 8002eca <__swsetup_r+0x16>
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 f97d 	bl	80031c4 <__sinit>
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <__swsetup_r+0xd0>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d10f      	bne.n	8002ef0 <__swsetup_r+0x3c>
 8002ed0:	686c      	ldr	r4, [r5, #4]
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ed8:	0719      	lsls	r1, r3, #28
 8002eda:	d42c      	bmi.n	8002f36 <__swsetup_r+0x82>
 8002edc:	06dd      	lsls	r5, r3, #27
 8002ede:	d411      	bmi.n	8002f04 <__swsetup_r+0x50>
 8002ee0:	2309      	movs	r3, #9
 8002ee2:	6033      	str	r3, [r6, #0]
 8002ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	81a3      	strh	r3, [r4, #12]
 8002eee:	e03e      	b.n	8002f6e <__swsetup_r+0xba>
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <__swsetup_r+0xd4>)
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	d101      	bne.n	8002efa <__swsetup_r+0x46>
 8002ef6:	68ac      	ldr	r4, [r5, #8]
 8002ef8:	e7eb      	b.n	8002ed2 <__swsetup_r+0x1e>
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <__swsetup_r+0xd8>)
 8002efc:	429c      	cmp	r4, r3
 8002efe:	bf08      	it	eq
 8002f00:	68ec      	ldreq	r4, [r5, #12]
 8002f02:	e7e6      	b.n	8002ed2 <__swsetup_r+0x1e>
 8002f04:	0758      	lsls	r0, r3, #29
 8002f06:	d512      	bpl.n	8002f2e <__swsetup_r+0x7a>
 8002f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f0a:	b141      	cbz	r1, 8002f1e <__swsetup_r+0x6a>
 8002f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f10:	4299      	cmp	r1, r3
 8002f12:	d002      	beq.n	8002f1a <__swsetup_r+0x66>
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 fa59 	bl	80033cc <_free_r>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	6923      	ldr	r3, [r4, #16]
 8002f38:	b94b      	cbnz	r3, 8002f4e <__swsetup_r+0x9a>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d003      	beq.n	8002f4e <__swsetup_r+0x9a>
 8002f46:	4621      	mov	r1, r4
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f000 f9ff 	bl	800334c <__smakebuf_r>
 8002f4e:	89a0      	ldrh	r0, [r4, #12]
 8002f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f54:	f010 0301 	ands.w	r3, r0, #1
 8002f58:	d00a      	beq.n	8002f70 <__swsetup_r+0xbc>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60a3      	str	r3, [r4, #8]
 8002f5e:	6963      	ldr	r3, [r4, #20]
 8002f60:	425b      	negs	r3, r3
 8002f62:	61a3      	str	r3, [r4, #24]
 8002f64:	6923      	ldr	r3, [r4, #16]
 8002f66:	b943      	cbnz	r3, 8002f7a <__swsetup_r+0xc6>
 8002f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f6c:	d1ba      	bne.n	8002ee4 <__swsetup_r+0x30>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	0781      	lsls	r1, r0, #30
 8002f72:	bf58      	it	pl
 8002f74:	6963      	ldrpl	r3, [r4, #20]
 8002f76:	60a3      	str	r3, [r4, #8]
 8002f78:	e7f4      	b.n	8002f64 <__swsetup_r+0xb0>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	e7f7      	b.n	8002f6e <__swsetup_r+0xba>
 8002f7e:	bf00      	nop
 8002f80:	20000010 	.word	0x20000010
 8002f84:	08003758 	.word	0x08003758
 8002f88:	08003778 	.word	0x08003778
 8002f8c:	08003738 	.word	0x08003738

08002f90 <__sflush_r>:
 8002f90:	898a      	ldrh	r2, [r1, #12]
 8002f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f96:	4605      	mov	r5, r0
 8002f98:	0710      	lsls	r0, r2, #28
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	d458      	bmi.n	8003050 <__sflush_r+0xc0>
 8002f9e:	684b      	ldr	r3, [r1, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	dc05      	bgt.n	8002fb0 <__sflush_r+0x20>
 8002fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	dc02      	bgt.n	8002fb0 <__sflush_r+0x20>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	d0f9      	beq.n	8002faa <__sflush_r+0x1a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fbc:	682f      	ldr	r7, [r5, #0]
 8002fbe:	602b      	str	r3, [r5, #0]
 8002fc0:	d032      	beq.n	8003028 <__sflush_r+0x98>
 8002fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	075a      	lsls	r2, r3, #29
 8002fc8:	d505      	bpl.n	8002fd6 <__sflush_r+0x46>
 8002fca:	6863      	ldr	r3, [r4, #4]
 8002fcc:	1ac0      	subs	r0, r0, r3
 8002fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fd0:	b10b      	cbz	r3, 8002fd6 <__sflush_r+0x46>
 8002fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd4:	1ac0      	subs	r0, r0, r3
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fdc:	4628      	mov	r0, r5
 8002fde:	6a21      	ldr	r1, [r4, #32]
 8002fe0:	47b0      	blx	r6
 8002fe2:	1c43      	adds	r3, r0, #1
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	d106      	bne.n	8002ff6 <__sflush_r+0x66>
 8002fe8:	6829      	ldr	r1, [r5, #0]
 8002fea:	291d      	cmp	r1, #29
 8002fec:	d82c      	bhi.n	8003048 <__sflush_r+0xb8>
 8002fee:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <__sflush_r+0x108>)
 8002ff0:	40ca      	lsrs	r2, r1
 8002ff2:	07d6      	lsls	r6, r2, #31
 8002ff4:	d528      	bpl.n	8003048 <__sflush_r+0xb8>
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	6062      	str	r2, [r4, #4]
 8002ffa:	6922      	ldr	r2, [r4, #16]
 8002ffc:	04d9      	lsls	r1, r3, #19
 8002ffe:	6022      	str	r2, [r4, #0]
 8003000:	d504      	bpl.n	800300c <__sflush_r+0x7c>
 8003002:	1c42      	adds	r2, r0, #1
 8003004:	d101      	bne.n	800300a <__sflush_r+0x7a>
 8003006:	682b      	ldr	r3, [r5, #0]
 8003008:	b903      	cbnz	r3, 800300c <__sflush_r+0x7c>
 800300a:	6560      	str	r0, [r4, #84]	; 0x54
 800300c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800300e:	602f      	str	r7, [r5, #0]
 8003010:	2900      	cmp	r1, #0
 8003012:	d0ca      	beq.n	8002faa <__sflush_r+0x1a>
 8003014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003018:	4299      	cmp	r1, r3
 800301a:	d002      	beq.n	8003022 <__sflush_r+0x92>
 800301c:	4628      	mov	r0, r5
 800301e:	f000 f9d5 	bl	80033cc <_free_r>
 8003022:	2000      	movs	r0, #0
 8003024:	6360      	str	r0, [r4, #52]	; 0x34
 8003026:	e7c1      	b.n	8002fac <__sflush_r+0x1c>
 8003028:	6a21      	ldr	r1, [r4, #32]
 800302a:	2301      	movs	r3, #1
 800302c:	4628      	mov	r0, r5
 800302e:	47b0      	blx	r6
 8003030:	1c41      	adds	r1, r0, #1
 8003032:	d1c7      	bne.n	8002fc4 <__sflush_r+0x34>
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0c4      	beq.n	8002fc4 <__sflush_r+0x34>
 800303a:	2b1d      	cmp	r3, #29
 800303c:	d001      	beq.n	8003042 <__sflush_r+0xb2>
 800303e:	2b16      	cmp	r3, #22
 8003040:	d101      	bne.n	8003046 <__sflush_r+0xb6>
 8003042:	602f      	str	r7, [r5, #0]
 8003044:	e7b1      	b.n	8002faa <__sflush_r+0x1a>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	e7ad      	b.n	8002fac <__sflush_r+0x1c>
 8003050:	690f      	ldr	r7, [r1, #16]
 8003052:	2f00      	cmp	r7, #0
 8003054:	d0a9      	beq.n	8002faa <__sflush_r+0x1a>
 8003056:	0793      	lsls	r3, r2, #30
 8003058:	bf18      	it	ne
 800305a:	2300      	movne	r3, #0
 800305c:	680e      	ldr	r6, [r1, #0]
 800305e:	bf08      	it	eq
 8003060:	694b      	ldreq	r3, [r1, #20]
 8003062:	eba6 0807 	sub.w	r8, r6, r7
 8003066:	600f      	str	r7, [r1, #0]
 8003068:	608b      	str	r3, [r1, #8]
 800306a:	f1b8 0f00 	cmp.w	r8, #0
 800306e:	dd9c      	ble.n	8002faa <__sflush_r+0x1a>
 8003070:	4643      	mov	r3, r8
 8003072:	463a      	mov	r2, r7
 8003074:	4628      	mov	r0, r5
 8003076:	6a21      	ldr	r1, [r4, #32]
 8003078:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800307a:	47b0      	blx	r6
 800307c:	2800      	cmp	r0, #0
 800307e:	dc06      	bgt.n	800308e <__sflush_r+0xfe>
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	f04f 30ff 	mov.w	r0, #4294967295
 8003086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308a:	81a3      	strh	r3, [r4, #12]
 800308c:	e78e      	b.n	8002fac <__sflush_r+0x1c>
 800308e:	4407      	add	r7, r0
 8003090:	eba8 0800 	sub.w	r8, r8, r0
 8003094:	e7e9      	b.n	800306a <__sflush_r+0xda>
 8003096:	bf00      	nop
 8003098:	20400001 	.word	0x20400001

0800309c <_fflush_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	690b      	ldr	r3, [r1, #16]
 80030a0:	4605      	mov	r5, r0
 80030a2:	460c      	mov	r4, r1
 80030a4:	b913      	cbnz	r3, 80030ac <_fflush_r+0x10>
 80030a6:	2500      	movs	r5, #0
 80030a8:	4628      	mov	r0, r5
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	b118      	cbz	r0, 80030b6 <_fflush_r+0x1a>
 80030ae:	6983      	ldr	r3, [r0, #24]
 80030b0:	b90b      	cbnz	r3, 80030b6 <_fflush_r+0x1a>
 80030b2:	f000 f887 	bl	80031c4 <__sinit>
 80030b6:	4b14      	ldr	r3, [pc, #80]	; (8003108 <_fflush_r+0x6c>)
 80030b8:	429c      	cmp	r4, r3
 80030ba:	d11b      	bne.n	80030f4 <_fflush_r+0x58>
 80030bc:	686c      	ldr	r4, [r5, #4]
 80030be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ef      	beq.n	80030a6 <_fflush_r+0xa>
 80030c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030c8:	07d0      	lsls	r0, r2, #31
 80030ca:	d404      	bmi.n	80030d6 <_fflush_r+0x3a>
 80030cc:	0599      	lsls	r1, r3, #22
 80030ce:	d402      	bmi.n	80030d6 <_fflush_r+0x3a>
 80030d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030d2:	f000 f915 	bl	8003300 <__retarget_lock_acquire_recursive>
 80030d6:	4628      	mov	r0, r5
 80030d8:	4621      	mov	r1, r4
 80030da:	f7ff ff59 	bl	8002f90 <__sflush_r>
 80030de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030e0:	4605      	mov	r5, r0
 80030e2:	07da      	lsls	r2, r3, #31
 80030e4:	d4e0      	bmi.n	80030a8 <_fflush_r+0xc>
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	059b      	lsls	r3, r3, #22
 80030ea:	d4dd      	bmi.n	80030a8 <_fflush_r+0xc>
 80030ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ee:	f000 f908 	bl	8003302 <__retarget_lock_release_recursive>
 80030f2:	e7d9      	b.n	80030a8 <_fflush_r+0xc>
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <_fflush_r+0x70>)
 80030f6:	429c      	cmp	r4, r3
 80030f8:	d101      	bne.n	80030fe <_fflush_r+0x62>
 80030fa:	68ac      	ldr	r4, [r5, #8]
 80030fc:	e7df      	b.n	80030be <_fflush_r+0x22>
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <_fflush_r+0x74>)
 8003100:	429c      	cmp	r4, r3
 8003102:	bf08      	it	eq
 8003104:	68ec      	ldreq	r4, [r5, #12]
 8003106:	e7da      	b.n	80030be <_fflush_r+0x22>
 8003108:	08003758 	.word	0x08003758
 800310c:	08003778 	.word	0x08003778
 8003110:	08003738 	.word	0x08003738

08003114 <std>:
 8003114:	2300      	movs	r3, #0
 8003116:	b510      	push	{r4, lr}
 8003118:	4604      	mov	r4, r0
 800311a:	e9c0 3300 	strd	r3, r3, [r0]
 800311e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003122:	6083      	str	r3, [r0, #8]
 8003124:	8181      	strh	r1, [r0, #12]
 8003126:	6643      	str	r3, [r0, #100]	; 0x64
 8003128:	81c2      	strh	r2, [r0, #14]
 800312a:	6183      	str	r3, [r0, #24]
 800312c:	4619      	mov	r1, r3
 800312e:	2208      	movs	r2, #8
 8003130:	305c      	adds	r0, #92	; 0x5c
 8003132:	f7ff fdef 	bl	8002d14 <memset>
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <std+0x38>)
 8003138:	6224      	str	r4, [r4, #32]
 800313a:	6263      	str	r3, [r4, #36]	; 0x24
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <std+0x3c>)
 800313e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <std+0x40>)
 8003142:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <std+0x44>)
 8003146:	6323      	str	r3, [r4, #48]	; 0x30
 8003148:	bd10      	pop	{r4, pc}
 800314a:	bf00      	nop
 800314c:	08003539 	.word	0x08003539
 8003150:	0800355b 	.word	0x0800355b
 8003154:	08003593 	.word	0x08003593
 8003158:	080035b7 	.word	0x080035b7

0800315c <_cleanup_r>:
 800315c:	4901      	ldr	r1, [pc, #4]	; (8003164 <_cleanup_r+0x8>)
 800315e:	f000 b8af 	b.w	80032c0 <_fwalk_reent>
 8003162:	bf00      	nop
 8003164:	0800309d 	.word	0x0800309d

08003168 <__sfmoreglue>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	2568      	movs	r5, #104	; 0x68
 800316c:	1e4a      	subs	r2, r1, #1
 800316e:	4355      	muls	r5, r2
 8003170:	460e      	mov	r6, r1
 8003172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003176:	f000 f975 	bl	8003464 <_malloc_r>
 800317a:	4604      	mov	r4, r0
 800317c:	b140      	cbz	r0, 8003190 <__sfmoreglue+0x28>
 800317e:	2100      	movs	r1, #0
 8003180:	e9c0 1600 	strd	r1, r6, [r0]
 8003184:	300c      	adds	r0, #12
 8003186:	60a0      	str	r0, [r4, #8]
 8003188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800318c:	f7ff fdc2 	bl	8002d14 <memset>
 8003190:	4620      	mov	r0, r4
 8003192:	bd70      	pop	{r4, r5, r6, pc}

08003194 <__sfp_lock_acquire>:
 8003194:	4801      	ldr	r0, [pc, #4]	; (800319c <__sfp_lock_acquire+0x8>)
 8003196:	f000 b8b3 	b.w	8003300 <__retarget_lock_acquire_recursive>
 800319a:	bf00      	nop
 800319c:	200001bc 	.word	0x200001bc

080031a0 <__sfp_lock_release>:
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <__sfp_lock_release+0x8>)
 80031a2:	f000 b8ae 	b.w	8003302 <__retarget_lock_release_recursive>
 80031a6:	bf00      	nop
 80031a8:	200001bc 	.word	0x200001bc

080031ac <__sinit_lock_acquire>:
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <__sinit_lock_acquire+0x8>)
 80031ae:	f000 b8a7 	b.w	8003300 <__retarget_lock_acquire_recursive>
 80031b2:	bf00      	nop
 80031b4:	200001b7 	.word	0x200001b7

080031b8 <__sinit_lock_release>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__sinit_lock_release+0x8>)
 80031ba:	f000 b8a2 	b.w	8003302 <__retarget_lock_release_recursive>
 80031be:	bf00      	nop
 80031c0:	200001b7 	.word	0x200001b7

080031c4 <__sinit>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4604      	mov	r4, r0
 80031c8:	f7ff fff0 	bl	80031ac <__sinit_lock_acquire>
 80031cc:	69a3      	ldr	r3, [r4, #24]
 80031ce:	b11b      	cbz	r3, 80031d8 <__sinit+0x14>
 80031d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031d4:	f7ff bff0 	b.w	80031b8 <__sinit_lock_release>
 80031d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031dc:	6523      	str	r3, [r4, #80]	; 0x50
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <__sinit+0x68>)
 80031e0:	4a13      	ldr	r2, [pc, #76]	; (8003230 <__sinit+0x6c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80031e6:	42a3      	cmp	r3, r4
 80031e8:	bf08      	it	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	4620      	mov	r0, r4
 80031ee:	bf08      	it	eq
 80031f0:	61a3      	streq	r3, [r4, #24]
 80031f2:	f000 f81f 	bl	8003234 <__sfp>
 80031f6:	6060      	str	r0, [r4, #4]
 80031f8:	4620      	mov	r0, r4
 80031fa:	f000 f81b 	bl	8003234 <__sfp>
 80031fe:	60a0      	str	r0, [r4, #8]
 8003200:	4620      	mov	r0, r4
 8003202:	f000 f817 	bl	8003234 <__sfp>
 8003206:	2200      	movs	r2, #0
 8003208:	2104      	movs	r1, #4
 800320a:	60e0      	str	r0, [r4, #12]
 800320c:	6860      	ldr	r0, [r4, #4]
 800320e:	f7ff ff81 	bl	8003114 <std>
 8003212:	2201      	movs	r2, #1
 8003214:	2109      	movs	r1, #9
 8003216:	68a0      	ldr	r0, [r4, #8]
 8003218:	f7ff ff7c 	bl	8003114 <std>
 800321c:	2202      	movs	r2, #2
 800321e:	2112      	movs	r1, #18
 8003220:	68e0      	ldr	r0, [r4, #12]
 8003222:	f7ff ff77 	bl	8003114 <std>
 8003226:	2301      	movs	r3, #1
 8003228:	61a3      	str	r3, [r4, #24]
 800322a:	e7d1      	b.n	80031d0 <__sinit+0xc>
 800322c:	08003734 	.word	0x08003734
 8003230:	0800315d 	.word	0x0800315d

08003234 <__sfp>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	4607      	mov	r7, r0
 8003238:	f7ff ffac 	bl	8003194 <__sfp_lock_acquire>
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <__sfp+0x84>)
 800323e:	681e      	ldr	r6, [r3, #0]
 8003240:	69b3      	ldr	r3, [r6, #24]
 8003242:	b913      	cbnz	r3, 800324a <__sfp+0x16>
 8003244:	4630      	mov	r0, r6
 8003246:	f7ff ffbd 	bl	80031c4 <__sinit>
 800324a:	3648      	adds	r6, #72	; 0x48
 800324c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003250:	3b01      	subs	r3, #1
 8003252:	d503      	bpl.n	800325c <__sfp+0x28>
 8003254:	6833      	ldr	r3, [r6, #0]
 8003256:	b30b      	cbz	r3, 800329c <__sfp+0x68>
 8003258:	6836      	ldr	r6, [r6, #0]
 800325a:	e7f7      	b.n	800324c <__sfp+0x18>
 800325c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003260:	b9d5      	cbnz	r5, 8003298 <__sfp+0x64>
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <__sfp+0x88>)
 8003264:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003268:	60e3      	str	r3, [r4, #12]
 800326a:	6665      	str	r5, [r4, #100]	; 0x64
 800326c:	f000 f847 	bl	80032fe <__retarget_lock_init_recursive>
 8003270:	f7ff ff96 	bl	80031a0 <__sfp_lock_release>
 8003274:	2208      	movs	r2, #8
 8003276:	4629      	mov	r1, r5
 8003278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800327c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003280:	6025      	str	r5, [r4, #0]
 8003282:	61a5      	str	r5, [r4, #24]
 8003284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003288:	f7ff fd44 	bl	8002d14 <memset>
 800328c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003294:	4620      	mov	r0, r4
 8003296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003298:	3468      	adds	r4, #104	; 0x68
 800329a:	e7d9      	b.n	8003250 <__sfp+0x1c>
 800329c:	2104      	movs	r1, #4
 800329e:	4638      	mov	r0, r7
 80032a0:	f7ff ff62 	bl	8003168 <__sfmoreglue>
 80032a4:	4604      	mov	r4, r0
 80032a6:	6030      	str	r0, [r6, #0]
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d1d5      	bne.n	8003258 <__sfp+0x24>
 80032ac:	f7ff ff78 	bl	80031a0 <__sfp_lock_release>
 80032b0:	230c      	movs	r3, #12
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	e7ee      	b.n	8003294 <__sfp+0x60>
 80032b6:	bf00      	nop
 80032b8:	08003734 	.word	0x08003734
 80032bc:	ffff0001 	.word	0xffff0001

080032c0 <_fwalk_reent>:
 80032c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c4:	4606      	mov	r6, r0
 80032c6:	4688      	mov	r8, r1
 80032c8:	2700      	movs	r7, #0
 80032ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032d2:	f1b9 0901 	subs.w	r9, r9, #1
 80032d6:	d505      	bpl.n	80032e4 <_fwalk_reent+0x24>
 80032d8:	6824      	ldr	r4, [r4, #0]
 80032da:	2c00      	cmp	r4, #0
 80032dc:	d1f7      	bne.n	80032ce <_fwalk_reent+0xe>
 80032de:	4638      	mov	r0, r7
 80032e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e4:	89ab      	ldrh	r3, [r5, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d907      	bls.n	80032fa <_fwalk_reent+0x3a>
 80032ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032ee:	3301      	adds	r3, #1
 80032f0:	d003      	beq.n	80032fa <_fwalk_reent+0x3a>
 80032f2:	4629      	mov	r1, r5
 80032f4:	4630      	mov	r0, r6
 80032f6:	47c0      	blx	r8
 80032f8:	4307      	orrs	r7, r0
 80032fa:	3568      	adds	r5, #104	; 0x68
 80032fc:	e7e9      	b.n	80032d2 <_fwalk_reent+0x12>

080032fe <__retarget_lock_init_recursive>:
 80032fe:	4770      	bx	lr

08003300 <__retarget_lock_acquire_recursive>:
 8003300:	4770      	bx	lr

08003302 <__retarget_lock_release_recursive>:
 8003302:	4770      	bx	lr

08003304 <__swhatbuf_r>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	460e      	mov	r6, r1
 8003308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800330c:	4614      	mov	r4, r2
 800330e:	2900      	cmp	r1, #0
 8003310:	461d      	mov	r5, r3
 8003312:	b096      	sub	sp, #88	; 0x58
 8003314:	da07      	bge.n	8003326 <__swhatbuf_r+0x22>
 8003316:	2300      	movs	r3, #0
 8003318:	602b      	str	r3, [r5, #0]
 800331a:	89b3      	ldrh	r3, [r6, #12]
 800331c:	061a      	lsls	r2, r3, #24
 800331e:	d410      	bmi.n	8003342 <__swhatbuf_r+0x3e>
 8003320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003324:	e00e      	b.n	8003344 <__swhatbuf_r+0x40>
 8003326:	466a      	mov	r2, sp
 8003328:	f000 f96c 	bl	8003604 <_fstat_r>
 800332c:	2800      	cmp	r0, #0
 800332e:	dbf2      	blt.n	8003316 <__swhatbuf_r+0x12>
 8003330:	9a01      	ldr	r2, [sp, #4]
 8003332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800333a:	425a      	negs	r2, r3
 800333c:	415a      	adcs	r2, r3
 800333e:	602a      	str	r2, [r5, #0]
 8003340:	e7ee      	b.n	8003320 <__swhatbuf_r+0x1c>
 8003342:	2340      	movs	r3, #64	; 0x40
 8003344:	2000      	movs	r0, #0
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	b016      	add	sp, #88	; 0x58
 800334a:	bd70      	pop	{r4, r5, r6, pc}

0800334c <__smakebuf_r>:
 800334c:	898b      	ldrh	r3, [r1, #12]
 800334e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003350:	079d      	lsls	r5, r3, #30
 8003352:	4606      	mov	r6, r0
 8003354:	460c      	mov	r4, r1
 8003356:	d507      	bpl.n	8003368 <__smakebuf_r+0x1c>
 8003358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	2301      	movs	r3, #1
 8003362:	6163      	str	r3, [r4, #20]
 8003364:	b002      	add	sp, #8
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	466a      	mov	r2, sp
 800336a:	ab01      	add	r3, sp, #4
 800336c:	f7ff ffca 	bl	8003304 <__swhatbuf_r>
 8003370:	9900      	ldr	r1, [sp, #0]
 8003372:	4605      	mov	r5, r0
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f875 	bl	8003464 <_malloc_r>
 800337a:	b948      	cbnz	r0, 8003390 <__smakebuf_r+0x44>
 800337c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003380:	059a      	lsls	r2, r3, #22
 8003382:	d4ef      	bmi.n	8003364 <__smakebuf_r+0x18>
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	e7e3      	b.n	8003358 <__smakebuf_r+0xc>
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <__smakebuf_r+0x7c>)
 8003392:	62b3      	str	r3, [r6, #40]	; 0x28
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	6020      	str	r0, [r4, #0]
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	9b00      	ldr	r3, [sp, #0]
 80033a0:	6120      	str	r0, [r4, #16]
 80033a2:	6163      	str	r3, [r4, #20]
 80033a4:	9b01      	ldr	r3, [sp, #4]
 80033a6:	b15b      	cbz	r3, 80033c0 <__smakebuf_r+0x74>
 80033a8:	4630      	mov	r0, r6
 80033aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ae:	f000 f93b 	bl	8003628 <_isatty_r>
 80033b2:	b128      	cbz	r0, 80033c0 <__smakebuf_r+0x74>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	89a0      	ldrh	r0, [r4, #12]
 80033c2:	4305      	orrs	r5, r0
 80033c4:	81a5      	strh	r5, [r4, #12]
 80033c6:	e7cd      	b.n	8003364 <__smakebuf_r+0x18>
 80033c8:	0800315d 	.word	0x0800315d

080033cc <_free_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4605      	mov	r5, r0
 80033d0:	2900      	cmp	r1, #0
 80033d2:	d043      	beq.n	800345c <_free_r+0x90>
 80033d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d8:	1f0c      	subs	r4, r1, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bfb8      	it	lt
 80033de:	18e4      	addlt	r4, r4, r3
 80033e0:	f000 f944 	bl	800366c <__malloc_lock>
 80033e4:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <_free_r+0x94>)
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	4610      	mov	r0, r2
 80033ea:	b933      	cbnz	r3, 80033fa <_free_r+0x2e>
 80033ec:	6063      	str	r3, [r4, #4]
 80033ee:	6014      	str	r4, [r2, #0]
 80033f0:	4628      	mov	r0, r5
 80033f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033f6:	f000 b93f 	b.w	8003678 <__malloc_unlock>
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	d90a      	bls.n	8003414 <_free_r+0x48>
 80033fe:	6821      	ldr	r1, [r4, #0]
 8003400:	1862      	adds	r2, r4, r1
 8003402:	4293      	cmp	r3, r2
 8003404:	bf01      	itttt	eq
 8003406:	681a      	ldreq	r2, [r3, #0]
 8003408:	685b      	ldreq	r3, [r3, #4]
 800340a:	1852      	addeq	r2, r2, r1
 800340c:	6022      	streq	r2, [r4, #0]
 800340e:	6063      	str	r3, [r4, #4]
 8003410:	6004      	str	r4, [r0, #0]
 8003412:	e7ed      	b.n	80033f0 <_free_r+0x24>
 8003414:	461a      	mov	r2, r3
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b10b      	cbz	r3, 800341e <_free_r+0x52>
 800341a:	42a3      	cmp	r3, r4
 800341c:	d9fa      	bls.n	8003414 <_free_r+0x48>
 800341e:	6811      	ldr	r1, [r2, #0]
 8003420:	1850      	adds	r0, r2, r1
 8003422:	42a0      	cmp	r0, r4
 8003424:	d10b      	bne.n	800343e <_free_r+0x72>
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	4401      	add	r1, r0
 800342a:	1850      	adds	r0, r2, r1
 800342c:	4283      	cmp	r3, r0
 800342e:	6011      	str	r1, [r2, #0]
 8003430:	d1de      	bne.n	80033f0 <_free_r+0x24>
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4401      	add	r1, r0
 8003438:	6011      	str	r1, [r2, #0]
 800343a:	6053      	str	r3, [r2, #4]
 800343c:	e7d8      	b.n	80033f0 <_free_r+0x24>
 800343e:	d902      	bls.n	8003446 <_free_r+0x7a>
 8003440:	230c      	movs	r3, #12
 8003442:	602b      	str	r3, [r5, #0]
 8003444:	e7d4      	b.n	80033f0 <_free_r+0x24>
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	1821      	adds	r1, r4, r0
 800344a:	428b      	cmp	r3, r1
 800344c:	bf01      	itttt	eq
 800344e:	6819      	ldreq	r1, [r3, #0]
 8003450:	685b      	ldreq	r3, [r3, #4]
 8003452:	1809      	addeq	r1, r1, r0
 8003454:	6021      	streq	r1, [r4, #0]
 8003456:	6063      	str	r3, [r4, #4]
 8003458:	6054      	str	r4, [r2, #4]
 800345a:	e7c9      	b.n	80033f0 <_free_r+0x24>
 800345c:	bd38      	pop	{r3, r4, r5, pc}
 800345e:	bf00      	nop
 8003460:	20000098 	.word	0x20000098

08003464 <_malloc_r>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	1ccd      	adds	r5, r1, #3
 8003468:	f025 0503 	bic.w	r5, r5, #3
 800346c:	3508      	adds	r5, #8
 800346e:	2d0c      	cmp	r5, #12
 8003470:	bf38      	it	cc
 8003472:	250c      	movcc	r5, #12
 8003474:	2d00      	cmp	r5, #0
 8003476:	4606      	mov	r6, r0
 8003478:	db01      	blt.n	800347e <_malloc_r+0x1a>
 800347a:	42a9      	cmp	r1, r5
 800347c:	d903      	bls.n	8003486 <_malloc_r+0x22>
 800347e:	230c      	movs	r3, #12
 8003480:	6033      	str	r3, [r6, #0]
 8003482:	2000      	movs	r0, #0
 8003484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003486:	f000 f8f1 	bl	800366c <__malloc_lock>
 800348a:	4921      	ldr	r1, [pc, #132]	; (8003510 <_malloc_r+0xac>)
 800348c:	680a      	ldr	r2, [r1, #0]
 800348e:	4614      	mov	r4, r2
 8003490:	b99c      	cbnz	r4, 80034ba <_malloc_r+0x56>
 8003492:	4f20      	ldr	r7, [pc, #128]	; (8003514 <_malloc_r+0xb0>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b923      	cbnz	r3, 80034a2 <_malloc_r+0x3e>
 8003498:	4621      	mov	r1, r4
 800349a:	4630      	mov	r0, r6
 800349c:	f000 f83c 	bl	8003518 <_sbrk_r>
 80034a0:	6038      	str	r0, [r7, #0]
 80034a2:	4629      	mov	r1, r5
 80034a4:	4630      	mov	r0, r6
 80034a6:	f000 f837 	bl	8003518 <_sbrk_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d123      	bne.n	80034f6 <_malloc_r+0x92>
 80034ae:	230c      	movs	r3, #12
 80034b0:	4630      	mov	r0, r6
 80034b2:	6033      	str	r3, [r6, #0]
 80034b4:	f000 f8e0 	bl	8003678 <__malloc_unlock>
 80034b8:	e7e3      	b.n	8003482 <_malloc_r+0x1e>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	1b5b      	subs	r3, r3, r5
 80034be:	d417      	bmi.n	80034f0 <_malloc_r+0x8c>
 80034c0:	2b0b      	cmp	r3, #11
 80034c2:	d903      	bls.n	80034cc <_malloc_r+0x68>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	441c      	add	r4, r3
 80034c8:	6025      	str	r5, [r4, #0]
 80034ca:	e004      	b.n	80034d6 <_malloc_r+0x72>
 80034cc:	6863      	ldr	r3, [r4, #4]
 80034ce:	42a2      	cmp	r2, r4
 80034d0:	bf0c      	ite	eq
 80034d2:	600b      	streq	r3, [r1, #0]
 80034d4:	6053      	strne	r3, [r2, #4]
 80034d6:	4630      	mov	r0, r6
 80034d8:	f000 f8ce 	bl	8003678 <__malloc_unlock>
 80034dc:	f104 000b 	add.w	r0, r4, #11
 80034e0:	1d23      	adds	r3, r4, #4
 80034e2:	f020 0007 	bic.w	r0, r0, #7
 80034e6:	1ac2      	subs	r2, r0, r3
 80034e8:	d0cc      	beq.n	8003484 <_malloc_r+0x20>
 80034ea:	1a1b      	subs	r3, r3, r0
 80034ec:	50a3      	str	r3, [r4, r2]
 80034ee:	e7c9      	b.n	8003484 <_malloc_r+0x20>
 80034f0:	4622      	mov	r2, r4
 80034f2:	6864      	ldr	r4, [r4, #4]
 80034f4:	e7cc      	b.n	8003490 <_malloc_r+0x2c>
 80034f6:	1cc4      	adds	r4, r0, #3
 80034f8:	f024 0403 	bic.w	r4, r4, #3
 80034fc:	42a0      	cmp	r0, r4
 80034fe:	d0e3      	beq.n	80034c8 <_malloc_r+0x64>
 8003500:	1a21      	subs	r1, r4, r0
 8003502:	4630      	mov	r0, r6
 8003504:	f000 f808 	bl	8003518 <_sbrk_r>
 8003508:	3001      	adds	r0, #1
 800350a:	d1dd      	bne.n	80034c8 <_malloc_r+0x64>
 800350c:	e7cf      	b.n	80034ae <_malloc_r+0x4a>
 800350e:	bf00      	nop
 8003510:	20000098 	.word	0x20000098
 8003514:	2000009c 	.word	0x2000009c

08003518 <_sbrk_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	2300      	movs	r3, #0
 800351c:	4d05      	ldr	r5, [pc, #20]	; (8003534 <_sbrk_r+0x1c>)
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	f7fd fbfe 	bl	8000d24 <_sbrk>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_sbrk_r+0x1a>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_sbrk_r+0x1a>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	200001c0 	.word	0x200001c0

08003538 <__sread>:
 8003538:	b510      	push	{r4, lr}
 800353a:	460c      	mov	r4, r1
 800353c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003540:	f000 f8a0 	bl	8003684 <_read_r>
 8003544:	2800      	cmp	r0, #0
 8003546:	bfab      	itete	ge
 8003548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800354a:	89a3      	ldrhlt	r3, [r4, #12]
 800354c:	181b      	addge	r3, r3, r0
 800354e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003552:	bfac      	ite	ge
 8003554:	6563      	strge	r3, [r4, #84]	; 0x54
 8003556:	81a3      	strhlt	r3, [r4, #12]
 8003558:	bd10      	pop	{r4, pc}

0800355a <__swrite>:
 800355a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355e:	461f      	mov	r7, r3
 8003560:	898b      	ldrh	r3, [r1, #12]
 8003562:	4605      	mov	r5, r0
 8003564:	05db      	lsls	r3, r3, #23
 8003566:	460c      	mov	r4, r1
 8003568:	4616      	mov	r6, r2
 800356a:	d505      	bpl.n	8003578 <__swrite+0x1e>
 800356c:	2302      	movs	r3, #2
 800356e:	2200      	movs	r2, #0
 8003570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003574:	f000 f868 	bl	8003648 <_lseek_r>
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	4632      	mov	r2, r6
 800357c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003580:	81a3      	strh	r3, [r4, #12]
 8003582:	4628      	mov	r0, r5
 8003584:	463b      	mov	r3, r7
 8003586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800358a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800358e:	f000 b817 	b.w	80035c0 <_write_r>

08003592 <__sseek>:
 8003592:	b510      	push	{r4, lr}
 8003594:	460c      	mov	r4, r1
 8003596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800359a:	f000 f855 	bl	8003648 <_lseek_r>
 800359e:	1c43      	adds	r3, r0, #1
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	bf15      	itete	ne
 80035a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035ae:	81a3      	strheq	r3, [r4, #12]
 80035b0:	bf18      	it	ne
 80035b2:	81a3      	strhne	r3, [r4, #12]
 80035b4:	bd10      	pop	{r4, pc}

080035b6 <__sclose>:
 80035b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ba:	f000 b813 	b.w	80035e4 <_close_r>
	...

080035c0 <_write_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	4604      	mov	r4, r0
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	2200      	movs	r2, #0
 80035ca:	4d05      	ldr	r5, [pc, #20]	; (80035e0 <_write_r+0x20>)
 80035cc:	602a      	str	r2, [r5, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f7fd f83e 	bl	8000650 <_write>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d102      	bne.n	80035de <_write_r+0x1e>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	b103      	cbz	r3, 80035de <_write_r+0x1e>
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	200001c0 	.word	0x200001c0

080035e4 <_close_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	2300      	movs	r3, #0
 80035e8:	4d05      	ldr	r5, [pc, #20]	; (8003600 <_close_r+0x1c>)
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	f7fd fb67 	bl	8000cc2 <_close>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_close_r+0x1a>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_close_r+0x1a>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	200001c0 	.word	0x200001c0

08003604 <_fstat_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	2300      	movs	r3, #0
 8003608:	4d06      	ldr	r5, [pc, #24]	; (8003624 <_fstat_r+0x20>)
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	602b      	str	r3, [r5, #0]
 8003612:	f7fd fb61 	bl	8000cd8 <_fstat>
 8003616:	1c43      	adds	r3, r0, #1
 8003618:	d102      	bne.n	8003620 <_fstat_r+0x1c>
 800361a:	682b      	ldr	r3, [r5, #0]
 800361c:	b103      	cbz	r3, 8003620 <_fstat_r+0x1c>
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	bd38      	pop	{r3, r4, r5, pc}
 8003622:	bf00      	nop
 8003624:	200001c0 	.word	0x200001c0

08003628 <_isatty_r>:
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	2300      	movs	r3, #0
 800362c:	4d05      	ldr	r5, [pc, #20]	; (8003644 <_isatty_r+0x1c>)
 800362e:	4604      	mov	r4, r0
 8003630:	4608      	mov	r0, r1
 8003632:	602b      	str	r3, [r5, #0]
 8003634:	f7fd fb5f 	bl	8000cf6 <_isatty>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_isatty_r+0x1a>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b103      	cbz	r3, 8003642 <_isatty_r+0x1a>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	200001c0 	.word	0x200001c0

08003648 <_lseek_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4604      	mov	r4, r0
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	2200      	movs	r2, #0
 8003652:	4d05      	ldr	r5, [pc, #20]	; (8003668 <_lseek_r+0x20>)
 8003654:	602a      	str	r2, [r5, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	f7fd fb57 	bl	8000d0a <_lseek>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_lseek_r+0x1e>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_lseek_r+0x1e>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	200001c0 	.word	0x200001c0

0800366c <__malloc_lock>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__malloc_lock+0x8>)
 800366e:	f7ff be47 	b.w	8003300 <__retarget_lock_acquire_recursive>
 8003672:	bf00      	nop
 8003674:	200001b8 	.word	0x200001b8

08003678 <__malloc_unlock>:
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <__malloc_unlock+0x8>)
 800367a:	f7ff be42 	b.w	8003302 <__retarget_lock_release_recursive>
 800367e:	bf00      	nop
 8003680:	200001b8 	.word	0x200001b8

08003684 <_read_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4604      	mov	r4, r0
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	2200      	movs	r2, #0
 800368e:	4d05      	ldr	r5, [pc, #20]	; (80036a4 <_read_r+0x20>)
 8003690:	602a      	str	r2, [r5, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	f7fd faf8 	bl	8000c88 <_read>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_read_r+0x1e>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_read_r+0x1e>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	200001c0 	.word	0x200001c0

080036a8 <_init>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr

080036b4 <_fini>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr
