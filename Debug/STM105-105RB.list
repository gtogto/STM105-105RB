
STM105-105RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003744  08003744  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800374c  0800374c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000078  080037cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080037cc  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5d9  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5c  00000000  00000000  0002a67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002cc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fc4  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a294  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae636  00000000  00000000  0003a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c40  00000000  00000000  000e8de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08003664 	.word	0x08003664

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08003664 	.word	0x08003664

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_UART_RxCpltCallback>:
/*############################################################################*/

/*############################################################################*/
/*uart interrupt test*/ //gto

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a3d      	ldr	r2, [pc, #244]	; (8000620 <HAL_UART_RxCpltCallback+0x104>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10d      	bne.n	800054a <HAL_UART_RxCpltCallback+0x2e>
	        // When one data is received, an interrupt is generated.
			//HAL_GPIO_WritePin(GPIOB, SYNC_EN, 0); 							// GPIO PB14 OUTPUT LOW -> SYNC_EN

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	493c      	ldr	r1, [pc, #240]	; (8000624 <HAL_UART_RxCpltCallback+0x108>)
 8000532:	483d      	ldr	r0, [pc, #244]	; (8000628 <HAL_UART_RxCpltCallback+0x10c>)
 8000534:	f001 ff49 	bl	80023ca <HAL_UART_Receive_IT>

	        // Send the received data.
			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 8000538:	230a      	movs	r3, #10
 800053a:	2201      	movs	r2, #1
 800053c:	4939      	ldr	r1, [pc, #228]	; (8000624 <HAL_UART_RxCpltCallback+0x108>)
 800053e:	483a      	ldr	r0, [pc, #232]	; (8000628 <HAL_UART_RxCpltCallback+0x10c>)
 8000540:	f001 feb1 	bl	80022a6 <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 8000544:	4b39      	ldr	r3, [pc, #228]	; (800062c <HAL_UART_RxCpltCallback+0x110>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0); // LED RED OFF
			*/

	}

	if (huart->Instance == USART2) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a38      	ldr	r2, [pc, #224]	; (8000630 <HAL_UART_RxCpltCallback+0x114>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d15e      	bne.n	8000612 <HAL_UART_RxCpltCallback+0xf6>
			//debugPrintln(&huart2, "uart1 interrupt! ");
			// When one data is received, an interrupt is generated.
			HAL_UART_Receive_IT(&huart2, &rxdata, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	4937      	ldr	r1, [pc, #220]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 8000558:	4837      	ldr	r0, [pc, #220]	; (8000638 <HAL_UART_RxCpltCallback+0x11c>)
 800055a:	f001 ff36 	bl	80023ca <HAL_UART_Receive_IT>
			// Send the received data.
			//HAL_UART_Transmit(&huart2, &rxdata, 1, 10);



			switch(status){
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <HAL_UART_RxCpltCallback+0x120>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d002      	beq.n	800056c <HAL_UART_RxCpltCallback+0x50>
 8000566:	2b02      	cmp	r3, #2
 8000568:	d011      	beq.n	800058e <HAL_UART_RxCpltCallback+0x72>
					}
					break ;
			}

	}
}
 800056a:	e055      	b.n	8000618 <HAL_UART_RxCpltCallback+0xfc>
					if( rxdata == START_CODE ) {
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b3c      	cmp	r3, #60	; 0x3c
 8000572:	d150      	bne.n	8000616 <HAL_UART_RxCpltCallback+0xfa>
						rxd[0] = START_CODE ;
 8000574:	4b32      	ldr	r3, [pc, #200]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 8000576:	223c      	movs	r2, #60	; 0x3c
 8000578:	701a      	strb	r2, [r3, #0]
						rx_cnt = 1 ;
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
						status = PAYLOAD ;
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <HAL_UART_RxCpltCallback+0x120>)
 8000582:	2202      	movs	r2, #2
 8000584:	701a      	strb	r2, [r3, #0]
						uart2_key_Flag = 0 ;
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
					break ;
 800058c:	e043      	b.n	8000616 <HAL_UART_RxCpltCallback+0xfa>
					if( rxdata == START_CODE ) {
 800058e:	4b29      	ldr	r3, [pc, #164]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b3c      	cmp	r3, #60	; 0x3c
 8000594:	d109      	bne.n	80005aa <HAL_UART_RxCpltCallback+0x8e>
						rxd[0] = START_CODE ;
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 8000598:	223c      	movs	r2, #60	; 0x3c
 800059a:	701a      	strb	r2, [r3, #0]
						rx_cnt = 1 ;
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
						status = PAYLOAD ;
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <HAL_UART_RxCpltCallback+0x120>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	701a      	strb	r2, [r3, #0]
					break ;
 80005a8:	e036      	b.n	8000618 <HAL_UART_RxCpltCallback+0xfc>
					else if( rxdata == END_CODE ) {
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b3e      	cmp	r3, #62	; 0x3e
 80005b0:	d115      	bne.n	80005de <HAL_UART_RxCpltCallback+0xc2>
						if( rx_cnt == (LENGTH-1) )  {
 80005b2:	4b24      	ldr	r3, [pc, #144]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b0f      	cmp	r3, #15
 80005b8:	d10d      	bne.n	80005d6 <HAL_UART_RxCpltCallback+0xba>
							rxd[rx_cnt++] = rxdata ;
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	b2d1      	uxtb	r1, r2
 80005c2:	4a20      	ldr	r2, [pc, #128]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005c4:	7011      	strb	r1, [r2, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 80005ca:	7819      	ldrb	r1, [r3, #0]
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 80005ce:	5499      	strb	r1, [r3, r2]
							uart2_key_Flag = 1 ;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
						status = START ;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_UART_RxCpltCallback+0x120>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
					break ;
 80005dc:	e01c      	b.n	8000618 <HAL_UART_RxCpltCallback+0xfc>
						if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b11      	cmp	r3, #17
 80005e4:	d80b      	bhi.n	80005fe <HAL_UART_RxCpltCallback+0xe2>
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	b2d1      	uxtb	r1, r2
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_UART_RxCpltCallback+0x118>)
 80005f6:	7819      	ldrb	r1, [r3, #0]
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_UART_RxCpltCallback+0x124>)
 80005fa:	5499      	strb	r1, [r3, r2]
					break ;
 80005fc:	e00c      	b.n	8000618 <HAL_UART_RxCpltCallback+0xfc>
							status = START ;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <HAL_UART_RxCpltCallback+0x120>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
							rx_cnt = 0 ;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_UART_RxCpltCallback+0x128>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
							uart2_key_Flag = 0 ;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_UART_RxCpltCallback+0x12c>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
					break ;
 8000610:	e002      	b.n	8000618 <HAL_UART_RxCpltCallback+0xfc>
	}
 8000612:	bf00      	nop
 8000614:	e000      	b.n	8000618 <HAL_UART_RxCpltCallback+0xfc>
					break ;
 8000616:	bf00      	nop
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40013800 	.word	0x40013800
 8000624:	200000ee 	.word	0x200000ee
 8000628:	200000a8 	.word	0x200000a8
 800062c:	20000094 	.word	0x20000094
 8000630:	40004400 	.word	0x40004400
 8000634:	200000a5 	.word	0x200000a5
 8000638:	20000148 	.word	0x20000148
 800063c:	20000005 	.word	0x20000005
 8000640:	2000018c 	.word	0x2000018c
 8000644:	200000a4 	.word	0x200000a4
 8000648:	20000095 	.word	0x20000095

0800064c <_write>:
/*############################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	b29a      	uxth	r2, r3
 800065c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000660:	68b9      	ldr	r1, [r7, #8]
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <_write+0x28>)
 8000664:	f001 fe1f 	bl	80022a6 <HAL_UART_Transmit>
	return len;
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000a8 	.word	0x200000a8

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fbe7 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f889 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f97d 	bl	8000984 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800068a:	f000 f925 	bl	80008d8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800068e:	f000 f8ed 	bl	800086c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000692:	f000 f94d 	bl	8000930 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000696:	f000 f8cd 	bl	8000834 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, SYNC_EN, 1); 							// GPIO PB14 OUTPUT HIGH -> SYNC_EN
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a0:	4831      	ldr	r0, [pc, #196]	; (8000768 <main+0xf0>)
 80006a2:	f001 f80b 	bl	80016bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, STM_TX_EN, 0); 							// GPIO PB14 OUTPUT LOWH -> SYNC_EN
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	482e      	ldr	r0, [pc, #184]	; (8000768 <main+0xf0>)
 80006ae:	f001 f805 	bl	80016bc <HAL_GPIO_WritePin>

  printf("\r\n ### START STM32F105 Slave Board ### \r\n");
 80006b2:	482e      	ldr	r0, [pc, #184]	; (800076c <main+0xf4>)
 80006b4:	f002 fb82 	bl	8002dbc <puts>

  /*receive Interrupt*/
  HAL_UART_Receive_IT(&huart1, (uint8_t *) &rx_data, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	492d      	ldr	r1, [pc, #180]	; (8000770 <main+0xf8>)
 80006bc:	482d      	ldr	r0, [pc, #180]	; (8000774 <main+0xfc>)
 80006be:	f001 fe84 	bl	80023ca <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1); 			// interrupt uart 2
 80006c2:	2201      	movs	r2, #1
 80006c4:	492c      	ldr	r1, [pc, #176]	; (8000778 <main+0x100>)
 80006c6:	482d      	ldr	r0, [pc, #180]	; (800077c <main+0x104>)
 80006c8:	f001 fe7f 	bl	80023ca <HAL_UART_Receive_IT>
  while (1)
  {
	//HAL_UART_Transmit(&huart1, (uint8_t *)&uart1_4M, 2, 10);
	//DWT_Delay_us(1000000);

	if(uart2_key_Flag)
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <main+0x108>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d02f      	beq.n	8000734 <main+0xbc>
	{
		  uart2_key_Flag = 0;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <main+0x108>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);							// LED RED ON
 80006da:	2201      	movs	r2, #1
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	4829      	ldr	r0, [pc, #164]	; (8000784 <main+0x10c>)
 80006e0:	f000 ffec 	bl	80016bc <HAL_GPIO_WritePin>

		  for (int i = 0; i < LENGTH; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	e00a      	b.n	8000700 <main+0x88>
			  HAL_UART_Transmit(&huart2, (uint8_t *) &rxd[i], 1, 10);
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <main+0x110>)
 80006ee:	1899      	adds	r1, r3, r2
 80006f0:	230a      	movs	r3, #10
 80006f2:	2201      	movs	r2, #1
 80006f4:	4821      	ldr	r0, [pc, #132]	; (800077c <main+0x104>)
 80006f6:	f001 fdd6 	bl	80022a6 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	2b0f      	cmp	r3, #15
 8000704:	ddf1      	ble.n	80006ea <main+0x72>

		  if (s_ID == "00"){

		  }*/

		  HAL_GPIO_WritePin(GPIOB, SYNC_EN, 0); 							// GPIO PB14 OUTPUT LOW -> SYNC_EN
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <main+0xf0>)
 800070e:	f000 ffd5 	bl	80016bc <HAL_GPIO_WritePin>

		  /*Configure GPIO pins : PA2 PA3 */	//gto
		  //change uart2 port to gpio

		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
		  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800071e:	230c      	movs	r3, #12
 8000720:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4817      	ldr	r0, [pc, #92]	; (800078c <main+0x114>)
 8000730:	f000 fe40 	bl	80013b4 <HAL_GPIO_Init>
	}

	if(uart1_key_Flag){
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <main+0x118>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0c7      	beq.n	80006cc <main+0x54>
		  uart1_key_Flag = 0;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <main+0x118>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, STM_TX_EN, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	4807      	ldr	r0, [pc, #28]	; (8000768 <main+0xf0>)
 800074a:	f000 ffb7 	bl	80016bc <HAL_GPIO_WritePin>
		  //DWT_Delay_us(20);
		  HAL_UART_Transmit(&huart1, (uint8_t *) &to407, 5, 10);
 800074e:	230a      	movs	r3, #10
 8000750:	2205      	movs	r2, #5
 8000752:	4910      	ldr	r1, [pc, #64]	; (8000794 <main+0x11c>)
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <main+0xfc>)
 8000756:	f001 fda6 	bl	80022a6 <HAL_UART_Transmit>
		  //DWT_Delay_us(20);
		  HAL_GPIO_WritePin(GPIOB, STM_TX_EN, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <main+0xf0>)
 8000762:	f000 ffab 	bl	80016bc <HAL_GPIO_WritePin>
	if(uart2_key_Flag)
 8000766:	e7b1      	b.n	80006cc <main+0x54>
 8000768:	40010c00 	.word	0x40010c00
 800076c:	0800367c 	.word	0x0800367c
 8000770:	200000ee 	.word	0x200000ee
 8000774:	200000a8 	.word	0x200000a8
 8000778:	200000a5 	.word	0x200000a5
 800077c:	20000148 	.word	0x20000148
 8000780:	20000095 	.word	0x20000095
 8000784:	40011000 	.word	0x40011000
 8000788:	2000018c 	.word	0x2000018c
 800078c:	40010800 	.word	0x40010800
 8000790:	20000094 	.word	0x20000094
 8000794:	20000000 	.word	0x20000000

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2238      	movs	r2, #56	; 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fa92 	bl	8002cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ff7f 	bl	80016ec <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80007f4:	f000 f934 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2102      	movs	r1, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fa80 	bl	8001d18 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800081e:	f000 f91f 	bl	8000a60 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <SystemClock_Config+0x98>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	42420070 	.word	0x42420070

08000834 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2005      	movs	r0, #5
 800083e:	f000 fc40 	bl	80010c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000842:	2005      	movs	r0, #5
 8000844:	f000 fc59 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f000 fc38 	bl	80010c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000852:	2025      	movs	r0, #37	; 0x25
 8000854:	f000 fc51 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2026      	movs	r0, #38	; 0x26
 800085e:	f000 fc30 	bl	80010c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000862:	2026      	movs	r0, #38	; 0x26
 8000864:	f000 fc49 	bl	80010fa <HAL_NVIC_EnableIRQ>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x64>)
 800089e:	2208      	movs	r2, #8
 80008a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b6:	220a      	movs	r2, #10
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008bc:	f001 fc22 	bl	8002104 <HAL_SPI_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80008c6:	f000 f8cb 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000f0 	.word	0x200000f0
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
#endif
  huart1.Instance = USART1;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART1_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4000000; //7000000; //115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008e4:	4a11      	ldr	r2, [pc, #68]	; (800092c <MX_USART1_UART_Init+0x54>)
 80008e6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008fc:	220c      	movs	r2, #12
 80008fe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;	//UART_OVERSAMPLING_8;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000908:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800090c:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000910:	f001 fc7c 	bl	800220c <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f8a1 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000a8 	.word	0x200000a8
 8000928:	40013800 	.word	0x40013800
 800092c:	003d0900 	.word	0x003d0900

08000930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART2_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000968:	f001 fc50 	bl	800220c <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f875 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000148 	.word	0x20000148
 8000980:	40004400 	.word	0x40004400

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_GPIO_Init+0xd0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a2d      	ldr	r2, [pc, #180]	; (8000a54 <MX_GPIO_Init+0xd0>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a00:	f000 fe5c 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_GPIO_Init+0xd8>)
 8000a0c:	f000 fe56 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000a10:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a2a:	f000 fcc3 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000a2e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0xd8>)
 8000a48:	f000 fcb4 	bl	80013b4 <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40011000 	.word	0x40011000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* Peripheral interrupt init */

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_MspInit+0x60>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_MspInit+0x60>)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000

08000ad0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <HAL_SPI_MspInit+0x88>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d12f      	bne.n	8000b50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000af6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <HAL_SPI_MspInit+0x90>)
 8000b34:	f000 fc3e 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_SPI_MspInit+0x90>)
 8000b4c:	f000 fc32 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a37      	ldr	r2, [pc, #220]	; (8000c5c <HAL_UART_MspInit+0xf8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d132      	bne.n	8000bea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a35      	ldr	r2, [pc, #212]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4826      	ldr	r0, [pc, #152]	; (8000c64 <HAL_UART_MspInit+0x100>)
 8000bca:	f000 fbf3 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4820      	ldr	r0, [pc, #128]	; (8000c64 <HAL_UART_MspInit+0x100>)
 8000be4:	f000 fbe6 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be8:	e034      	b.n	8000c54 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <HAL_UART_MspInit+0x104>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d12f      	bne.n	8000c54 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfe:	61d3      	str	r3, [r2, #28]
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0xfc>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c24:	2304      	movs	r3, #4
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	4619      	mov	r1, r3
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <HAL_UART_MspInit+0x100>)
 8000c38:	f000 fbbc 	bl	80013b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_UART_MspInit+0x100>)
 8000c50:	f000 fbb0 	bl	80013b4 <HAL_GPIO_Init>
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40013800 	.word	0x40013800
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800
 8000c68:	40004400 	.word	0x40004400

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb2:	f000 f913 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
	...

08000cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <USART1_IRQHandler+0x10>)
 8000cce:	f001 fbad 	bl	800242c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000a8 	.word	0x200000a8

08000cdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <USART2_IRQHandler+0x10>)
 8000ce2:	f001 fba3 	bl	800242c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000148 	.word	0x20000148

08000cf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
	}

return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d50:	605a      	str	r2, [r3, #4]
	return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b085      	sub	sp, #20
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
	return 0;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f001 ff5e 	bl	8002c7c <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20010000 	.word	0x20010000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	20000098 	.word	0x20000098
 8000df4:	200001c8 	.word	0x200001c8

08000df8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e2a:	f7ff ffe5 	bl	8000df8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e2e:	f001 ff2b 	bl	8002c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e32:	f7ff fc21 	bl	8000678 <main>
  bx lr
 8000e36:	4770      	bx	lr
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e40:	08003754 	.word	0x08003754
  ldr r2, =_sbss
 8000e44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e48:	200001c8 	.word	0x200001c8

08000e4c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x28>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x28>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f923 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fdfe 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f93b 	bl	8001116 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f903 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	2000000c 	.word	0x2000000c

08000edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x1c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x20>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x20>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000010 	.word	0x20000010
 8000efc:	200001b4 	.word	0x200001b4

08000f00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <HAL_GetTick+0x10>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	200001b4 	.word	0x200001b4

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4906      	ldr	r1, [pc, #24]	; (8000fac <__NVIC_EnableIRQ+0x34>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff90 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff2d 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff42 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff90 	bl	8001004 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5f 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff35 	bl	8000f78 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001140:	2b02      	cmp	r3, #2
 8001142:	d008      	beq.n	8001156 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2204      	movs	r2, #4
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e020      	b.n	8001198 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 020e 	bic.w	r2, r2, #14
 8001164:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d005      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2204      	movs	r2, #4
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e0d6      	b.n	8001374 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 020e 	bic.w	r2, r2, #14
 80011d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_DMA_Abort_IT+0x1dc>)
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d958      	bls.n	80012a4 <HAL_DMA_Abort_IT+0x100>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a63      	ldr	r2, [pc, #396]	; (8001384 <HAL_DMA_Abort_IT+0x1e0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d04f      	beq.n	800129c <HAL_DMA_Abort_IT+0xf8>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a61      	ldr	r2, [pc, #388]	; (8001388 <HAL_DMA_Abort_IT+0x1e4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d048      	beq.n	8001298 <HAL_DMA_Abort_IT+0xf4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a60      	ldr	r2, [pc, #384]	; (800138c <HAL_DMA_Abort_IT+0x1e8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d040      	beq.n	8001292 <HAL_DMA_Abort_IT+0xee>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a5e      	ldr	r2, [pc, #376]	; (8001390 <HAL_DMA_Abort_IT+0x1ec>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d038      	beq.n	800128c <HAL_DMA_Abort_IT+0xe8>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5d      	ldr	r2, [pc, #372]	; (8001394 <HAL_DMA_Abort_IT+0x1f0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d030      	beq.n	8001286 <HAL_DMA_Abort_IT+0xe2>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a5b      	ldr	r2, [pc, #364]	; (8001398 <HAL_DMA_Abort_IT+0x1f4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d028      	beq.n	8001280 <HAL_DMA_Abort_IT+0xdc>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a53      	ldr	r2, [pc, #332]	; (8001380 <HAL_DMA_Abort_IT+0x1dc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d020      	beq.n	800127a <HAL_DMA_Abort_IT+0xd6>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a57      	ldr	r2, [pc, #348]	; (800139c <HAL_DMA_Abort_IT+0x1f8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_DMA_Abort_IT+0xd2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a56      	ldr	r2, [pc, #344]	; (80013a0 <HAL_DMA_Abort_IT+0x1fc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d012      	beq.n	8001272 <HAL_DMA_Abort_IT+0xce>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a54      	ldr	r2, [pc, #336]	; (80013a4 <HAL_DMA_Abort_IT+0x200>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00a      	beq.n	800126c <HAL_DMA_Abort_IT+0xc8>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a53      	ldr	r2, [pc, #332]	; (80013a8 <HAL_DMA_Abort_IT+0x204>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d102      	bne.n	8001266 <HAL_DMA_Abort_IT+0xc2>
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	e01b      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 8001266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126a:	e018      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 800126c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001270:	e015      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 8001272:	2310      	movs	r3, #16
 8001274:	e013      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 8001276:	2301      	movs	r3, #1
 8001278:	e011      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 800127a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800127e:	e00e      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 8001280:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001284:	e00b      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	e008      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 800128c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001290:	e005      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 8001292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001296:	e002      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 8001298:	2310      	movs	r3, #16
 800129a:	e000      	b.n	800129e <HAL_DMA_Abort_IT+0xfa>
 800129c:	2301      	movs	r3, #1
 800129e:	4a43      	ldr	r2, [pc, #268]	; (80013ac <HAL_DMA_Abort_IT+0x208>)
 80012a0:	6053      	str	r3, [r2, #4]
 80012a2:	e057      	b.n	8001354 <HAL_DMA_Abort_IT+0x1b0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a36      	ldr	r2, [pc, #216]	; (8001384 <HAL_DMA_Abort_IT+0x1e0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d04f      	beq.n	800134e <HAL_DMA_Abort_IT+0x1aa>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a35      	ldr	r2, [pc, #212]	; (8001388 <HAL_DMA_Abort_IT+0x1e4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d048      	beq.n	800134a <HAL_DMA_Abort_IT+0x1a6>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a33      	ldr	r2, [pc, #204]	; (800138c <HAL_DMA_Abort_IT+0x1e8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d040      	beq.n	8001344 <HAL_DMA_Abort_IT+0x1a0>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_DMA_Abort_IT+0x1ec>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d038      	beq.n	800133e <HAL_DMA_Abort_IT+0x19a>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a30      	ldr	r2, [pc, #192]	; (8001394 <HAL_DMA_Abort_IT+0x1f0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d030      	beq.n	8001338 <HAL_DMA_Abort_IT+0x194>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_DMA_Abort_IT+0x1f4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d028      	beq.n	8001332 <HAL_DMA_Abort_IT+0x18e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a26      	ldr	r2, [pc, #152]	; (8001380 <HAL_DMA_Abort_IT+0x1dc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d020      	beq.n	800132c <HAL_DMA_Abort_IT+0x188>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a2b      	ldr	r2, [pc, #172]	; (800139c <HAL_DMA_Abort_IT+0x1f8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d019      	beq.n	8001328 <HAL_DMA_Abort_IT+0x184>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <HAL_DMA_Abort_IT+0x1fc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d012      	beq.n	8001324 <HAL_DMA_Abort_IT+0x180>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <HAL_DMA_Abort_IT+0x200>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00a      	beq.n	800131e <HAL_DMA_Abort_IT+0x17a>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <HAL_DMA_Abort_IT+0x204>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d102      	bne.n	8001318 <HAL_DMA_Abort_IT+0x174>
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	e01b      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 8001318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131c:	e018      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 800131e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001322:	e015      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 8001324:	2310      	movs	r3, #16
 8001326:	e013      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 8001328:	2301      	movs	r3, #1
 800132a:	e011      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 800132c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001330:	e00e      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 8001332:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001336:	e00b      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 8001338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133c:	e008      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	e005      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	e002      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 800134a:	2310      	movs	r3, #16
 800134c:	e000      	b.n	8001350 <HAL_DMA_Abort_IT+0x1ac>
 800134e:	2301      	movs	r3, #1
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_DMA_Abort_IT+0x20c>)
 8001352:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
    } 
  }
  return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020080 	.word	0x40020080
 8001384:	40020008 	.word	0x40020008
 8001388:	4002001c 	.word	0x4002001c
 800138c:	40020030 	.word	0x40020030
 8001390:	40020044 	.word	0x40020044
 8001394:	40020058 	.word	0x40020058
 8001398:	4002006c 	.word	0x4002006c
 800139c:	40020408 	.word	0x40020408
 80013a0:	4002041c 	.word	0x4002041c
 80013a4:	40020430 	.word	0x40020430
 80013a8:	40020444 	.word	0x40020444
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	; 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e169      	b.n	800169c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c8:	2201      	movs	r2, #1
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 8158 	bne.w	8001696 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a9a      	ldr	r2, [pc, #616]	; (8001654 <HAL_GPIO_Init+0x2a0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d05e      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013f0:	4a98      	ldr	r2, [pc, #608]	; (8001654 <HAL_GPIO_Init+0x2a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d875      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 80013f6:	4a98      	ldr	r2, [pc, #608]	; (8001658 <HAL_GPIO_Init+0x2a4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d058      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013fc:	4a96      	ldr	r2, [pc, #600]	; (8001658 <HAL_GPIO_Init+0x2a4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d86f      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001402:	4a96      	ldr	r2, [pc, #600]	; (800165c <HAL_GPIO_Init+0x2a8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d052      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001408:	4a94      	ldr	r2, [pc, #592]	; (800165c <HAL_GPIO_Init+0x2a8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d869      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800140e:	4a94      	ldr	r2, [pc, #592]	; (8001660 <HAL_GPIO_Init+0x2ac>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d04c      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001414:	4a92      	ldr	r2, [pc, #584]	; (8001660 <HAL_GPIO_Init+0x2ac>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d863      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800141a:	4a92      	ldr	r2, [pc, #584]	; (8001664 <HAL_GPIO_Init+0x2b0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d046      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001420:	4a90      	ldr	r2, [pc, #576]	; (8001664 <HAL_GPIO_Init+0x2b0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d85d      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d82a      	bhi.n	8001480 <HAL_GPIO_Init+0xcc>
 800142a:	2b12      	cmp	r3, #18
 800142c:	d859      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <HAL_GPIO_Init+0x80>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	080014af 	.word	0x080014af
 8001438:	08001489 	.word	0x08001489
 800143c:	0800149b 	.word	0x0800149b
 8001440:	080014dd 	.word	0x080014dd
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080014e3 	.word	0x080014e3
 800144c:	080014e3 	.word	0x080014e3
 8001450:	080014e3 	.word	0x080014e3
 8001454:	080014e3 	.word	0x080014e3
 8001458:	080014e3 	.word	0x080014e3
 800145c:	080014e3 	.word	0x080014e3
 8001460:	080014e3 	.word	0x080014e3
 8001464:	080014e3 	.word	0x080014e3
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014e3 	.word	0x080014e3
 8001470:	080014e3 	.word	0x080014e3
 8001474:	080014e3 	.word	0x080014e3
 8001478:	08001491 	.word	0x08001491
 800147c:	080014a5 	.word	0x080014a5
 8001480:	4a79      	ldr	r2, [pc, #484]	; (8001668 <HAL_GPIO_Init+0x2b4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001486:	e02c      	b.n	80014e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e029      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	3304      	adds	r3, #4
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e024      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	3308      	adds	r3, #8
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e01f      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	330c      	adds	r3, #12
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e01a      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b6:	2304      	movs	r3, #4
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e013      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	611a      	str	r2, [r3, #16]
          break;
 80014ce:	e009      	b.n	80014e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	615a      	str	r2, [r3, #20]
          break;
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          break;
 80014e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	; 0xff
 80014e8:	d801      	bhi.n	80014ee <HAL_GPIO_Init+0x13a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	e001      	b.n	80014f2 <HAL_GPIO_Init+0x13e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3304      	adds	r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	; 0xff
 80014f8:	d802      	bhi.n	8001500 <HAL_GPIO_Init+0x14c>
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x152>
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3b08      	subs	r3, #8
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	210f      	movs	r1, #15
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	6a39      	ldr	r1, [r7, #32]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80b1 	beq.w	8001696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a4c      	ldr	r2, [pc, #304]	; (800166c <HAL_GPIO_Init+0x2b8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800154c:	4a48      	ldr	r2, [pc, #288]	; (8001670 <HAL_GPIO_Init+0x2bc>)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a40      	ldr	r2, [pc, #256]	; (8001674 <HAL_GPIO_Init+0x2c0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3f      	ldr	r2, [pc, #252]	; (8001678 <HAL_GPIO_Init+0x2c4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3e      	ldr	r2, [pc, #248]	; (800167c <HAL_GPIO_Init+0x2c8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <HAL_GPIO_Init+0x2cc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1e0>
 8001590:	2303      	movs	r3, #3
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001594:	2304      	movs	r3, #4
 8001596:	e004      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001598:	2302      	movs	r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 80015a0:	2300      	movs	r3, #0
 80015a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a4:	f002 0203 	and.w	r2, r2, #3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b2:	492f      	ldr	r1, [pc, #188]	; (8001670 <HAL_GPIO_Init+0x2bc>)
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	492c      	ldr	r1, [pc, #176]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4928      	ldr	r1, [pc, #160]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4922      	ldr	r1, [pc, #136]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	491e      	ldr	r1, [pc, #120]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	4918      	ldr	r1, [pc, #96]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4914      	ldr	r1, [pc, #80]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d021      	beq.n	8001688 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
 8001650:	e021      	b.n	8001696 <HAL_GPIO_Init+0x2e2>
 8001652:	bf00      	nop
 8001654:	10320000 	.word	0x10320000
 8001658:	10310000 	.word	0x10310000
 800165c:	10220000 	.word	0x10220000
 8001660:	10210000 	.word	0x10210000
 8001664:	10120000 	.word	0x10120000
 8001668:	10110000 	.word	0x10110000
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	40010800 	.word	0x40010800
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40011000 	.word	0x40011000
 8001680:	40011400 	.word	0x40011400
 8001684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_GPIO_Init+0x304>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4909      	ldr	r1, [pc, #36]	; (80016b8 <HAL_GPIO_Init+0x304>)
 8001692:	4013      	ands	r3, r2
 8001694:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f ae8e 	bne.w	80013c8 <HAL_GPIO_Init+0x14>
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	372c      	adds	r7, #44	; 0x2c
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e304      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b92      	ldr	r3, [pc, #584]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4b8f      	ldr	r3, [pc, #572]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
 8001724:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e2de      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x76>
 8001754:	4b80      	ldr	r3, [pc, #512]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7f      	ldr	r2, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b78      	ldr	r3, [pc, #480]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a77      	ldr	r2, [pc, #476]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbc>
 800178e:	4b72      	ldr	r3, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a71      	ldr	r2, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 80017a8:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6a      	ldr	r2, [pc, #424]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a67      	ldr	r2, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb9a 	bl	8000f00 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb96 	bl	8000f00 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e292      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe4>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb86 	bl	8000f00 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb82 	bl	8000f00 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e27e      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x10c>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e252      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4939      	ldr	r1, [pc, #228]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fb3b 	bl	8000f00 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fb37 	bl	8000f00 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e233      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4927      	ldr	r1, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb1a 	bl	8000f00 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fb16 	bl	8000f00 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e212      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fafa 	bl	8000f00 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff faf6 	bl	8000f00 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1f2      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fbca 	bl	80020c8 <RCC_Delay>
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fae0 	bl	8000f00 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fadc 	bl	8000f00 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d908      	bls.n	8001964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1d8      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	42420000 	.word	0x42420000
 8001960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b9b      	ldr	r3, [pc, #620]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a6 	beq.w	8001aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b94      	ldr	r3, [pc, #592]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b91      	ldr	r3, [pc, #580]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a90      	ldr	r2, [pc, #576]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b8e      	ldr	r3, [pc, #568]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b8b      	ldr	r3, [pc, #556]	; (8001bd8 <HAL_RCC_OscConfig+0x4ec>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x4ec>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a87      	ldr	r2, [pc, #540]	; (8001bd8 <HAL_RCC_OscConfig+0x4ec>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fa9d 	bl	8000f00 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff fa99 	bl	8000f00 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e195      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b7e      	ldr	r3, [pc, #504]	; (8001bd8 <HAL_RCC_OscConfig+0x4ec>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x312>
 80019f0:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a77      	ldr	r2, [pc, #476]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a06:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a72      	ldr	r2, [pc, #456]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a6f      	ldr	r2, [pc, #444]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x356>
 8001a28:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a69      	ldr	r2, [pc, #420]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a66      	ldr	r2, [pc, #408]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a42:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a63      	ldr	r2, [pc, #396]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a60      	ldr	r2, [pc, #384]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa4d 	bl	8000f00 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fa49 	bl	8000f00 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e143      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b54      	ldr	r3, [pc, #336]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x37e>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fa37 	bl	8000f00 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fa33 	bl	8000f00 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e12d      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a44      	ldr	r2, [pc, #272]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 808c 	beq.w	8001bec <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d10e      	bne.n	8001b00 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e103      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d14e      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0ef      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001b28:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_RCC_OscConfig+0x4f0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f9e7 	bl	8000f00 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001b36:	f7ff f9e3 	bl	8000f00 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0df      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b60:	491c      	ldr	r1, [pc, #112]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4918      	ldr	r1, [pc, #96]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_RCC_OscConfig+0x4f0>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f9bf 	bl	8000f00 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001b86:	f7ff f9bb 	bl	8000f00 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b64      	cmp	r3, #100	; 0x64
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0b7      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x49a>
 8001ba4:	e022      	b.n	8001bec <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_RCC_OscConfig+0x4e8>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RCC_OscConfig+0x4f0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f9a2 	bl	8000f00 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001bc0:	f7ff f99e 	bl	8000f00 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d908      	bls.n	8001be0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e09a      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001be0:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e9      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8088 	beq.w	8001d06 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d068      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d14d      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <HAL_RCC_OscConfig+0x628>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f976 	bl	8000f00 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f972 	bl	8000f00 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e06e      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d10f      	bne.n	8001c60 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4931      	ldr	r1, [pc, #196]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	492d      	ldr	r1, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	430b      	orrs	r3, r1
 8001c72:	4927      	ldr	r1, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x628>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f93f 	bl	8000f00 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f93b 	bl	8000f00 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e037      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x59a>
 8001ca4:	e02f      	b.n	8001d06 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x628>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f928 	bl	8000f00 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f924 	bl	8000f00 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e020      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5c8>
 8001cd2:	e018      	b.n	8001d06 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e013      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	42420060 	.word	0x42420060

08001d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0d0      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b67      	ldr	r3, [pc, #412]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4965      	ldr	r1, [pc, #404]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d040      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e073      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06b      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4936      	ldr	r1, [pc, #216]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e08:	f7ff f87a 	bl	8000f00 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7ff f876 	bl	8000f00 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e053      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d210      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 0207 	bic.w	r2, r3, #7
 8001e4e:	4922      	ldr	r1, [pc, #136]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	490a      	ldr	r1, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	5ccb      	ldrb	r3, [r1, r3]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ffd8 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	080036c8 	.word	0x080036c8
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	b091      	sub	sp, #68	; 0x44
 8001ef0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_RCC_GetSysClockFreq+0x160>)
 8001ef4:	f107 0414 	add.w	r4, r7, #20
 8001ef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001efa:	c407      	stmia	r4!, {r0, r1, r2}
 8001efc:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001efe:	4b54      	ldr	r3, [pc, #336]	; (8002050 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f00:	1d3c      	adds	r4, r7, #4
 8001f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f24:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d002      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0x4e>
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d003      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x54>
 8001f38:	e080      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f3e:	e080      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	0c9b      	lsrs	r3, r3, #18
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d066      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d044      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	3301      	adds	r3, #1
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3302      	adds	r3, #2
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	fb02 f501 	mul.w	r5, r2, r1
 8001fae:	fb00 f403 	mul.w	r4, r0, r3
 8001fb2:	442c      	add	r4, r5
 8001fb4:	fba0 2302 	umull	r2, r3, r0, r2
 8001fb8:	18e1      	adds	r1, r4, r3
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4926      	ldr	r1, [pc, #152]	; (8002058 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001fbe:	fb01 f003 	mul.w	r0, r1, r3
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	fb01 f102 	mul.w	r1, r1, r2
 8001fc8:	4401      	add	r1, r0
 8001fca:	4823      	ldr	r0, [pc, #140]	; (8002058 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001fcc:	fba2 4500 	umull	r4, r5, r2, r0
 8001fd0:	194b      	adds	r3, r1, r5
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	fb02 fc01 	mul.w	ip, r2, r1
 8001fe8:	fb00 f603 	mul.w	r6, r0, r3
 8001fec:	4466      	add	r6, ip
 8001fee:	fba0 2302 	umull	r2, r3, r0, r2
 8001ff2:	18f1      	adds	r1, r6, r3
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	f7fe f913 	bl	8000224 <__aeabi_uldivmod>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4613      	mov	r3, r2
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002006:	e007      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_RCC_GetSysClockFreq+0x16c>)
 800200c:	fb02 f203 	mul.w	r2, r2, r3
 8002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002018:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800201c:	461a      	mov	r2, r3
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8002024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202a:	e004      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_RCC_GetSysClockFreq+0x170>)
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800203a:	e002      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_GetSysClockFreq+0x174>)
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002044:	4618      	mov	r0, r3
 8002046:	3744      	adds	r7, #68	; 0x44
 8002048:	46bd      	mov	sp, r7
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204c:	080036a8 	.word	0x080036a8
 8002050:	080036b8 	.word	0x080036b8
 8002054:	40021000 	.word	0x40021000
 8002058:	00b71b00 	.word	0x00b71b00
 800205c:	003d0900 	.word	0x003d0900
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b02      	ldr	r3, [pc, #8]	; (8002074 <HAL_RCC_GetHCLKFreq+0x10>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800207c:	f7ff fff2 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	080036d8 	.word	0x080036d8

080020a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a4:	f7ff ffde 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	0adb      	lsrs	r3, r3, #11
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	080036d8 	.word	0x080036d8

080020c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <RCC_Delay+0x34>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <RCC_Delay+0x38>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0a5b      	lsrs	r3, r3, #9
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e4:	bf00      	nop
  }
  while (Delay --);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	60fa      	str	r2, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f9      	bne.n	80020e4 <RCC_Delay+0x1c>
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000008 	.word	0x20000008
 8002100:	10624dd3 	.word	0x10624dd3

08002104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e076      	b.n	8002204 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002126:	d009      	beq.n	800213c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
 800212e:	e005      	b.n	800213c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fcba 	bl	8000ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	ea42 0103 	orr.w	r1, r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	0c1a      	lsrs	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f002 0204 	and.w	r2, r2, #4
 80021e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e03f      	b.n	800229e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fc96 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fc85 	bl	8002b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b08a      	sub	sp, #40	; 0x28
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d17c      	bne.n	80023c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_UART_Transmit+0x2c>
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e075      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_UART_Transmit+0x3e>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e06e      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2221      	movs	r2, #33	; 0x21
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022fa:	f7fe fe01 	bl	8000f00 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002314:	d108      	bne.n	8002328 <HAL_UART_Transmit+0x82>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	e003      	b.n	8002330 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002338:	e02a      	b.n	8002390 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2200      	movs	r2, #0
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa38 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e036      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3302      	adds	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e007      	b.n	8002382 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1cf      	bne.n	800233a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fa08 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e006      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	4613      	mov	r3, r2
 80023d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d11d      	bne.n	8002420 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_UART_Receive_IT+0x26>
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e016      	b.n	8002422 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Receive_IT+0x38>
 80023fe:	2302      	movs	r3, #2
 8002400:	e00f      	b.n	8002422 <HAL_UART_Receive_IT+0x58>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	461a      	mov	r2, r3
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fa19 	bl	800284e <UART_Start_Receive_IT>
 800241c:	4603      	mov	r3, r0
 800241e:	e000      	b.n	8002422 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_UART_IRQHandler+0x52>
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fac9 	bl	8002a0e <UART_Receive_IT>
      return;
 800247c:	e17b      	b.n	8002776 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80b1 	beq.w	80025e8 <HAL_UART_IRQHandler+0x1bc>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_UART_IRQHandler+0x70>
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80a6 	beq.w	80025e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_UART_IRQHandler+0x90>
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_UART_IRQHandler+0xb0>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0202 	orr.w	r2, r3, #2
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_UART_IRQHandler+0xd0>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00f      	beq.n	8002526 <HAL_UART_IRQHandler+0xfa>
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <HAL_UART_IRQHandler+0xee>
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0208 	orr.w	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 811e 	beq.w	800276c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_UART_IRQHandler+0x11e>
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fa62 	bl	8002a0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_UART_IRQHandler+0x146>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d031      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9a4 	bl	80028c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d023      	beq.n	80025ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002594:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	4a76      	ldr	r2, [pc, #472]	; (800277c <HAL_UART_IRQHandler+0x350>)
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fdfa 	bl	80011a4 <HAL_DMA_Abort_IT>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025c0:	4610      	mov	r0, r2
 80025c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	e00e      	b.n	80025e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8e3 	bl	8002792 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025cc:	e00a      	b.n	80025e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8df 	bl	8002792 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	e006      	b.n	80025e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8db 	bl	8002792 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025e2:	e0c3      	b.n	800276c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	bf00      	nop
    return;
 80025e6:	e0c1      	b.n	800276c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f040 80a1 	bne.w	8002734 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 809b 	beq.w	8002734 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8095 	beq.w	8002734 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d04e      	beq.n	80026cc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002638:	8a3b      	ldrh	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8098 	beq.w	8002770 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002644:	8a3a      	ldrh	r2, [r7, #16]
 8002646:	429a      	cmp	r2, r3
 8002648:	f080 8092 	bcs.w	8002770 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8a3a      	ldrh	r2, [r7, #16]
 8002650:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b20      	cmp	r3, #32
 800265a:	d02b      	beq.n	80026b4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800266a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0210 	bic.w	r2, r2, #16
 80026a8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fd3d 	bl	800112e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026bc:	b29b      	uxth	r3, r3
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f86d 	bl	80027a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026ca:	e051      	b.n	8002770 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d047      	beq.n	8002774 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026e4:	8a7b      	ldrh	r3, [r7, #18]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d044      	beq.n	8002774 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026f8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0210 	bic.w	r2, r2, #16
 8002726:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002728:	8a7b      	ldrh	r3, [r7, #18]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f839 	bl	80027a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002732:	e01f      	b.n	8002774 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_UART_IRQHandler+0x324>
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f8f9 	bl	8002940 <UART_Transmit_IT>
    return;
 800274e:	e012      	b.n	8002776 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <HAL_UART_IRQHandler+0x34a>
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f93a 	bl	80029de <UART_EndTransmit_IT>
    return;
 800276a:	e004      	b.n	8002776 <HAL_UART_IRQHandler+0x34a>
    return;
 800276c:	bf00      	nop
 800276e:	e002      	b.n	8002776 <HAL_UART_IRQHandler+0x34a>
      return;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <HAL_UART_IRQHandler+0x34a>
      return;
 8002774:	bf00      	nop
  }
}
 8002776:	3728      	adds	r7, #40	; 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	08002919 	.word	0x08002919

08002780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ca:	e02c      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d028      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x30>
 80027da:	f7fe fb91 	bl	8000f00 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d21d      	bcs.n	8002826 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e00f      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	429a      	cmp	r2, r3
 8002842:	d0c3      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2222      	movs	r2, #34	; 0x22
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002892:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0210 	bic.w	r2, r2, #16
 80028fe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f7ff ff2d 	bl	8002792 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b21      	cmp	r3, #33	; 0x21
 8002952:	d13e      	bne.n	80029d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295c:	d114      	bne.n	8002988 <UART_Transmit_IT+0x48>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d110      	bne.n	8002988 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800297a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]
 8002986:	e008      	b.n	800299a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	1c59      	adds	r1, r3, #1
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6211      	str	r1, [r2, #32]
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4619      	mov	r1, r3
 80029a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff febe 	bl	8002780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b22      	cmp	r3, #34	; 0x22
 8002a20:	f040 8099 	bne.w	8002b56 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	d117      	bne.n	8002a5e <UART_Receive_IT+0x50>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d113      	bne.n	8002a5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	1c9a      	adds	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a5c:	e026      	b.n	8002aac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a70:	d007      	beq.n	8002a82 <UART_Receive_IT+0x74>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <UART_Receive_IT+0x82>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e008      	b.n	8002aa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d148      	bne.n	8002b52 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0220 	bic.w	r2, r2, #32
 8002ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d123      	bne.n	8002b48 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0210 	bic.w	r2, r2, #16
 8002b14:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d10a      	bne.n	8002b3a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fe2f 	bl	80027a4 <HAL_UARTEx_RxEventCallback>
 8002b46:	e002      	b.n	8002b4e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fd fce7 	bl	800051c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e002      	b.n	8002b58 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b9a:	f023 030c 	bic.w	r3, r3, #12
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2c      	ldr	r2, [pc, #176]	; (8002c74 <UART_SetConfig+0x114>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d103      	bne.n	8002bd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bc8:	f7ff fa6a 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	e002      	b.n	8002bd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f7ff fa52 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8002bd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009a      	lsls	r2, r3, #2
 8002be0:	441a      	add	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <UART_SetConfig+0x118>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	0119      	lsls	r1, r3, #4
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <UART_SetConfig+0x118>)
 8002c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2064      	movs	r0, #100	; 0x64
 8002c16:	fb00 f303 	mul.w	r3, r0, r3
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	3332      	adds	r3, #50	; 0x32
 8002c20:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <UART_SetConfig+0x118>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2c:	4419      	add	r1, r3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	009a      	lsls	r2, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <UART_SetConfig+0x118>)
 8002c46:	fba3 0302 	umull	r0, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2064      	movs	r0, #100	; 0x64
 8002c4e:	fb00 f303 	mul.w	r3, r0, r3
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	3332      	adds	r3, #50	; 0x32
 8002c58:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <UART_SetConfig+0x118>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	440a      	add	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40013800 	.word	0x40013800
 8002c78:	51eb851f 	.word	0x51eb851f

08002c7c <__errno>:
 8002c7c:	4b01      	ldr	r3, [pc, #4]	; (8002c84 <__errno+0x8>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000014 	.word	0x20000014

08002c88 <__libc_init_array>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	4d0c      	ldr	r5, [pc, #48]	; (8002cc0 <__libc_init_array+0x38>)
 8002c8e:	4c0d      	ldr	r4, [pc, #52]	; (8002cc4 <__libc_init_array+0x3c>)
 8002c90:	1b64      	subs	r4, r4, r5
 8002c92:	10a4      	asrs	r4, r4, #2
 8002c94:	42a6      	cmp	r6, r4
 8002c96:	d109      	bne.n	8002cac <__libc_init_array+0x24>
 8002c98:	f000 fce4 	bl	8003664 <_init>
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	4d0a      	ldr	r5, [pc, #40]	; (8002cc8 <__libc_init_array+0x40>)
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <__libc_init_array+0x44>)
 8002ca2:	1b64      	subs	r4, r4, r5
 8002ca4:	10a4      	asrs	r4, r4, #2
 8002ca6:	42a6      	cmp	r6, r4
 8002ca8:	d105      	bne.n	8002cb6 <__libc_init_array+0x2e>
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb0:	4798      	blx	r3
 8002cb2:	3601      	adds	r6, #1
 8002cb4:	e7ee      	b.n	8002c94 <__libc_init_array+0xc>
 8002cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cba:	4798      	blx	r3
 8002cbc:	3601      	adds	r6, #1
 8002cbe:	e7f2      	b.n	8002ca6 <__libc_init_array+0x1e>
 8002cc0:	0800374c 	.word	0x0800374c
 8002cc4:	0800374c 	.word	0x0800374c
 8002cc8:	0800374c 	.word	0x0800374c
 8002ccc:	08003750 	.word	0x08003750

08002cd0 <memset>:
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4402      	add	r2, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	f803 1b01 	strb.w	r1, [r3], #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <_puts_r>:
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	460e      	mov	r6, r1
 8002ce4:	4605      	mov	r5, r0
 8002ce6:	b118      	cbz	r0, 8002cf0 <_puts_r+0x10>
 8002ce8:	6983      	ldr	r3, [r0, #24]
 8002cea:	b90b      	cbnz	r3, 8002cf0 <_puts_r+0x10>
 8002cec:	f000 fa48 	bl	8003180 <__sinit>
 8002cf0:	69ab      	ldr	r3, [r5, #24]
 8002cf2:	68ac      	ldr	r4, [r5, #8]
 8002cf4:	b913      	cbnz	r3, 8002cfc <_puts_r+0x1c>
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 fa42 	bl	8003180 <__sinit>
 8002cfc:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <_puts_r+0xd0>)
 8002cfe:	429c      	cmp	r4, r3
 8002d00:	d120      	bne.n	8002d44 <_puts_r+0x64>
 8002d02:	686c      	ldr	r4, [r5, #4]
 8002d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d06:	07db      	lsls	r3, r3, #31
 8002d08:	d405      	bmi.n	8002d16 <_puts_r+0x36>
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	0598      	lsls	r0, r3, #22
 8002d0e:	d402      	bmi.n	8002d16 <_puts_r+0x36>
 8002d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d12:	f000 fad3 	bl	80032bc <__retarget_lock_acquire_recursive>
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	0719      	lsls	r1, r3, #28
 8002d1a:	d51d      	bpl.n	8002d58 <_puts_r+0x78>
 8002d1c:	6923      	ldr	r3, [r4, #16]
 8002d1e:	b1db      	cbz	r3, 8002d58 <_puts_r+0x78>
 8002d20:	3e01      	subs	r6, #1
 8002d22:	68a3      	ldr	r3, [r4, #8]
 8002d24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60a3      	str	r3, [r4, #8]
 8002d2c:	bb39      	cbnz	r1, 8002d7e <_puts_r+0x9e>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da38      	bge.n	8002da4 <_puts_r+0xc4>
 8002d32:	4622      	mov	r2, r4
 8002d34:	210a      	movs	r1, #10
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 f848 	bl	8002dcc <__swbuf_r>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d011      	beq.n	8002d64 <_puts_r+0x84>
 8002d40:	250a      	movs	r5, #10
 8002d42:	e011      	b.n	8002d68 <_puts_r+0x88>
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <_puts_r+0xd4>)
 8002d46:	429c      	cmp	r4, r3
 8002d48:	d101      	bne.n	8002d4e <_puts_r+0x6e>
 8002d4a:	68ac      	ldr	r4, [r5, #8]
 8002d4c:	e7da      	b.n	8002d04 <_puts_r+0x24>
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <_puts_r+0xd8>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	bf08      	it	eq
 8002d54:	68ec      	ldreq	r4, [r5, #12]
 8002d56:	e7d5      	b.n	8002d04 <_puts_r+0x24>
 8002d58:	4621      	mov	r1, r4
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f000 f888 	bl	8002e70 <__swsetup_r>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d0dd      	beq.n	8002d20 <_puts_r+0x40>
 8002d64:	f04f 35ff 	mov.w	r5, #4294967295
 8002d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d6a:	07da      	lsls	r2, r3, #31
 8002d6c:	d405      	bmi.n	8002d7a <_puts_r+0x9a>
 8002d6e:	89a3      	ldrh	r3, [r4, #12]
 8002d70:	059b      	lsls	r3, r3, #22
 8002d72:	d402      	bmi.n	8002d7a <_puts_r+0x9a>
 8002d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d76:	f000 faa2 	bl	80032be <__retarget_lock_release_recursive>
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da04      	bge.n	8002d8c <_puts_r+0xac>
 8002d82:	69a2      	ldr	r2, [r4, #24]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dc06      	bgt.n	8002d96 <_puts_r+0xb6>
 8002d88:	290a      	cmp	r1, #10
 8002d8a:	d004      	beq.n	8002d96 <_puts_r+0xb6>
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	6022      	str	r2, [r4, #0]
 8002d92:	7019      	strb	r1, [r3, #0]
 8002d94:	e7c5      	b.n	8002d22 <_puts_r+0x42>
 8002d96:	4622      	mov	r2, r4
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f000 f817 	bl	8002dcc <__swbuf_r>
 8002d9e:	3001      	adds	r0, #1
 8002da0:	d1bf      	bne.n	8002d22 <_puts_r+0x42>
 8002da2:	e7df      	b.n	8002d64 <_puts_r+0x84>
 8002da4:	250a      	movs	r5, #10
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	6022      	str	r2, [r4, #0]
 8002dac:	701d      	strb	r5, [r3, #0]
 8002dae:	e7db      	b.n	8002d68 <_puts_r+0x88>
 8002db0:	08003704 	.word	0x08003704
 8002db4:	08003724 	.word	0x08003724
 8002db8:	080036e4 	.word	0x080036e4

08002dbc <puts>:
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <puts+0xc>)
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f7ff bf8d 	b.w	8002ce0 <_puts_r>
 8002dc6:	bf00      	nop
 8002dc8:	20000014 	.word	0x20000014

08002dcc <__swbuf_r>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	460e      	mov	r6, r1
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	b118      	cbz	r0, 8002dde <__swbuf_r+0x12>
 8002dd6:	6983      	ldr	r3, [r0, #24]
 8002dd8:	b90b      	cbnz	r3, 8002dde <__swbuf_r+0x12>
 8002dda:	f000 f9d1 	bl	8003180 <__sinit>
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <__swbuf_r+0x98>)
 8002de0:	429c      	cmp	r4, r3
 8002de2:	d12b      	bne.n	8002e3c <__swbuf_r+0x70>
 8002de4:	686c      	ldr	r4, [r5, #4]
 8002de6:	69a3      	ldr	r3, [r4, #24]
 8002de8:	60a3      	str	r3, [r4, #8]
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	071a      	lsls	r2, r3, #28
 8002dee:	d52f      	bpl.n	8002e50 <__swbuf_r+0x84>
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	b36b      	cbz	r3, 8002e50 <__swbuf_r+0x84>
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	b2f6      	uxtb	r6, r6
 8002dfa:	1ac0      	subs	r0, r0, r3
 8002dfc:	6963      	ldr	r3, [r4, #20]
 8002dfe:	4637      	mov	r7, r6
 8002e00:	4283      	cmp	r3, r0
 8002e02:	dc04      	bgt.n	8002e0e <__swbuf_r+0x42>
 8002e04:	4621      	mov	r1, r4
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f926 	bl	8003058 <_fflush_r>
 8002e0c:	bb30      	cbnz	r0, 8002e5c <__swbuf_r+0x90>
 8002e0e:	68a3      	ldr	r3, [r4, #8]
 8002e10:	3001      	adds	r0, #1
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60a3      	str	r3, [r4, #8]
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	6022      	str	r2, [r4, #0]
 8002e1c:	701e      	strb	r6, [r3, #0]
 8002e1e:	6963      	ldr	r3, [r4, #20]
 8002e20:	4283      	cmp	r3, r0
 8002e22:	d004      	beq.n	8002e2e <__swbuf_r+0x62>
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	07db      	lsls	r3, r3, #31
 8002e28:	d506      	bpl.n	8002e38 <__swbuf_r+0x6c>
 8002e2a:	2e0a      	cmp	r6, #10
 8002e2c:	d104      	bne.n	8002e38 <__swbuf_r+0x6c>
 8002e2e:	4621      	mov	r1, r4
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f911 	bl	8003058 <_fflush_r>
 8002e36:	b988      	cbnz	r0, 8002e5c <__swbuf_r+0x90>
 8002e38:	4638      	mov	r0, r7
 8002e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <__swbuf_r+0x9c>)
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	d101      	bne.n	8002e46 <__swbuf_r+0x7a>
 8002e42:	68ac      	ldr	r4, [r5, #8]
 8002e44:	e7cf      	b.n	8002de6 <__swbuf_r+0x1a>
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <__swbuf_r+0xa0>)
 8002e48:	429c      	cmp	r4, r3
 8002e4a:	bf08      	it	eq
 8002e4c:	68ec      	ldreq	r4, [r5, #12]
 8002e4e:	e7ca      	b.n	8002de6 <__swbuf_r+0x1a>
 8002e50:	4621      	mov	r1, r4
 8002e52:	4628      	mov	r0, r5
 8002e54:	f000 f80c 	bl	8002e70 <__swsetup_r>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d0cb      	beq.n	8002df4 <__swbuf_r+0x28>
 8002e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8002e60:	e7ea      	b.n	8002e38 <__swbuf_r+0x6c>
 8002e62:	bf00      	nop
 8002e64:	08003704 	.word	0x08003704
 8002e68:	08003724 	.word	0x08003724
 8002e6c:	080036e4 	.word	0x080036e4

08002e70 <__swsetup_r>:
 8002e70:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <__swsetup_r+0xcc>)
 8002e72:	b570      	push	{r4, r5, r6, lr}
 8002e74:	681d      	ldr	r5, [r3, #0]
 8002e76:	4606      	mov	r6, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	b125      	cbz	r5, 8002e86 <__swsetup_r+0x16>
 8002e7c:	69ab      	ldr	r3, [r5, #24]
 8002e7e:	b913      	cbnz	r3, 8002e86 <__swsetup_r+0x16>
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 f97d 	bl	8003180 <__sinit>
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <__swsetup_r+0xd0>)
 8002e88:	429c      	cmp	r4, r3
 8002e8a:	d10f      	bne.n	8002eac <__swsetup_r+0x3c>
 8002e8c:	686c      	ldr	r4, [r5, #4]
 8002e8e:	89a3      	ldrh	r3, [r4, #12]
 8002e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e94:	0719      	lsls	r1, r3, #28
 8002e96:	d42c      	bmi.n	8002ef2 <__swsetup_r+0x82>
 8002e98:	06dd      	lsls	r5, r3, #27
 8002e9a:	d411      	bmi.n	8002ec0 <__swsetup_r+0x50>
 8002e9c:	2309      	movs	r3, #9
 8002e9e:	6033      	str	r3, [r6, #0]
 8002ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	81a3      	strh	r3, [r4, #12]
 8002eaa:	e03e      	b.n	8002f2a <__swsetup_r+0xba>
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <__swsetup_r+0xd4>)
 8002eae:	429c      	cmp	r4, r3
 8002eb0:	d101      	bne.n	8002eb6 <__swsetup_r+0x46>
 8002eb2:	68ac      	ldr	r4, [r5, #8]
 8002eb4:	e7eb      	b.n	8002e8e <__swsetup_r+0x1e>
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <__swsetup_r+0xd8>)
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	bf08      	it	eq
 8002ebc:	68ec      	ldreq	r4, [r5, #12]
 8002ebe:	e7e6      	b.n	8002e8e <__swsetup_r+0x1e>
 8002ec0:	0758      	lsls	r0, r3, #29
 8002ec2:	d512      	bpl.n	8002eea <__swsetup_r+0x7a>
 8002ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ec6:	b141      	cbz	r1, 8002eda <__swsetup_r+0x6a>
 8002ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ecc:	4299      	cmp	r1, r3
 8002ece:	d002      	beq.n	8002ed6 <__swsetup_r+0x66>
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	f000 fa59 	bl	8003388 <_free_r>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ee0:	81a3      	strh	r3, [r4, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6063      	str	r3, [r4, #4]
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	6923      	ldr	r3, [r4, #16]
 8002ef4:	b94b      	cbnz	r3, 8002f0a <__swsetup_r+0x9a>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f00:	d003      	beq.n	8002f0a <__swsetup_r+0x9a>
 8002f02:	4621      	mov	r1, r4
 8002f04:	4630      	mov	r0, r6
 8002f06:	f000 f9ff 	bl	8003308 <__smakebuf_r>
 8002f0a:	89a0      	ldrh	r0, [r4, #12]
 8002f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f10:	f010 0301 	ands.w	r3, r0, #1
 8002f14:	d00a      	beq.n	8002f2c <__swsetup_r+0xbc>
 8002f16:	2300      	movs	r3, #0
 8002f18:	60a3      	str	r3, [r4, #8]
 8002f1a:	6963      	ldr	r3, [r4, #20]
 8002f1c:	425b      	negs	r3, r3
 8002f1e:	61a3      	str	r3, [r4, #24]
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	b943      	cbnz	r3, 8002f36 <__swsetup_r+0xc6>
 8002f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f28:	d1ba      	bne.n	8002ea0 <__swsetup_r+0x30>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	0781      	lsls	r1, r0, #30
 8002f2e:	bf58      	it	pl
 8002f30:	6963      	ldrpl	r3, [r4, #20]
 8002f32:	60a3      	str	r3, [r4, #8]
 8002f34:	e7f4      	b.n	8002f20 <__swsetup_r+0xb0>
 8002f36:	2000      	movs	r0, #0
 8002f38:	e7f7      	b.n	8002f2a <__swsetup_r+0xba>
 8002f3a:	bf00      	nop
 8002f3c:	20000014 	.word	0x20000014
 8002f40:	08003704 	.word	0x08003704
 8002f44:	08003724 	.word	0x08003724
 8002f48:	080036e4 	.word	0x080036e4

08002f4c <__sflush_r>:
 8002f4c:	898a      	ldrh	r2, [r1, #12]
 8002f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f52:	4605      	mov	r5, r0
 8002f54:	0710      	lsls	r0, r2, #28
 8002f56:	460c      	mov	r4, r1
 8002f58:	d458      	bmi.n	800300c <__sflush_r+0xc0>
 8002f5a:	684b      	ldr	r3, [r1, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dc05      	bgt.n	8002f6c <__sflush_r+0x20>
 8002f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	dc02      	bgt.n	8002f6c <__sflush_r+0x20>
 8002f66:	2000      	movs	r0, #0
 8002f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f6e:	2e00      	cmp	r6, #0
 8002f70:	d0f9      	beq.n	8002f66 <__sflush_r+0x1a>
 8002f72:	2300      	movs	r3, #0
 8002f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f78:	682f      	ldr	r7, [r5, #0]
 8002f7a:	602b      	str	r3, [r5, #0]
 8002f7c:	d032      	beq.n	8002fe4 <__sflush_r+0x98>
 8002f7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	075a      	lsls	r2, r3, #29
 8002f84:	d505      	bpl.n	8002f92 <__sflush_r+0x46>
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	1ac0      	subs	r0, r0, r3
 8002f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f8c:	b10b      	cbz	r3, 8002f92 <__sflush_r+0x46>
 8002f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f90:	1ac0      	subs	r0, r0, r3
 8002f92:	2300      	movs	r3, #0
 8002f94:	4602      	mov	r2, r0
 8002f96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f98:	4628      	mov	r0, r5
 8002f9a:	6a21      	ldr	r1, [r4, #32]
 8002f9c:	47b0      	blx	r6
 8002f9e:	1c43      	adds	r3, r0, #1
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	d106      	bne.n	8002fb2 <__sflush_r+0x66>
 8002fa4:	6829      	ldr	r1, [r5, #0]
 8002fa6:	291d      	cmp	r1, #29
 8002fa8:	d82c      	bhi.n	8003004 <__sflush_r+0xb8>
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <__sflush_r+0x108>)
 8002fac:	40ca      	lsrs	r2, r1
 8002fae:	07d6      	lsls	r6, r2, #31
 8002fb0:	d528      	bpl.n	8003004 <__sflush_r+0xb8>
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	6062      	str	r2, [r4, #4]
 8002fb6:	6922      	ldr	r2, [r4, #16]
 8002fb8:	04d9      	lsls	r1, r3, #19
 8002fba:	6022      	str	r2, [r4, #0]
 8002fbc:	d504      	bpl.n	8002fc8 <__sflush_r+0x7c>
 8002fbe:	1c42      	adds	r2, r0, #1
 8002fc0:	d101      	bne.n	8002fc6 <__sflush_r+0x7a>
 8002fc2:	682b      	ldr	r3, [r5, #0]
 8002fc4:	b903      	cbnz	r3, 8002fc8 <__sflush_r+0x7c>
 8002fc6:	6560      	str	r0, [r4, #84]	; 0x54
 8002fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fca:	602f      	str	r7, [r5, #0]
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	d0ca      	beq.n	8002f66 <__sflush_r+0x1a>
 8002fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	d002      	beq.n	8002fde <__sflush_r+0x92>
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f000 f9d5 	bl	8003388 <_free_r>
 8002fde:	2000      	movs	r0, #0
 8002fe0:	6360      	str	r0, [r4, #52]	; 0x34
 8002fe2:	e7c1      	b.n	8002f68 <__sflush_r+0x1c>
 8002fe4:	6a21      	ldr	r1, [r4, #32]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4628      	mov	r0, r5
 8002fea:	47b0      	blx	r6
 8002fec:	1c41      	adds	r1, r0, #1
 8002fee:	d1c7      	bne.n	8002f80 <__sflush_r+0x34>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0c4      	beq.n	8002f80 <__sflush_r+0x34>
 8002ff6:	2b1d      	cmp	r3, #29
 8002ff8:	d001      	beq.n	8002ffe <__sflush_r+0xb2>
 8002ffa:	2b16      	cmp	r3, #22
 8002ffc:	d101      	bne.n	8003002 <__sflush_r+0xb6>
 8002ffe:	602f      	str	r7, [r5, #0]
 8003000:	e7b1      	b.n	8002f66 <__sflush_r+0x1a>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003008:	81a3      	strh	r3, [r4, #12]
 800300a:	e7ad      	b.n	8002f68 <__sflush_r+0x1c>
 800300c:	690f      	ldr	r7, [r1, #16]
 800300e:	2f00      	cmp	r7, #0
 8003010:	d0a9      	beq.n	8002f66 <__sflush_r+0x1a>
 8003012:	0793      	lsls	r3, r2, #30
 8003014:	bf18      	it	ne
 8003016:	2300      	movne	r3, #0
 8003018:	680e      	ldr	r6, [r1, #0]
 800301a:	bf08      	it	eq
 800301c:	694b      	ldreq	r3, [r1, #20]
 800301e:	eba6 0807 	sub.w	r8, r6, r7
 8003022:	600f      	str	r7, [r1, #0]
 8003024:	608b      	str	r3, [r1, #8]
 8003026:	f1b8 0f00 	cmp.w	r8, #0
 800302a:	dd9c      	ble.n	8002f66 <__sflush_r+0x1a>
 800302c:	4643      	mov	r3, r8
 800302e:	463a      	mov	r2, r7
 8003030:	4628      	mov	r0, r5
 8003032:	6a21      	ldr	r1, [r4, #32]
 8003034:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003036:	47b0      	blx	r6
 8003038:	2800      	cmp	r0, #0
 800303a:	dc06      	bgt.n	800304a <__sflush_r+0xfe>
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	f04f 30ff 	mov.w	r0, #4294967295
 8003042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003046:	81a3      	strh	r3, [r4, #12]
 8003048:	e78e      	b.n	8002f68 <__sflush_r+0x1c>
 800304a:	4407      	add	r7, r0
 800304c:	eba8 0800 	sub.w	r8, r8, r0
 8003050:	e7e9      	b.n	8003026 <__sflush_r+0xda>
 8003052:	bf00      	nop
 8003054:	20400001 	.word	0x20400001

08003058 <_fflush_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	690b      	ldr	r3, [r1, #16]
 800305c:	4605      	mov	r5, r0
 800305e:	460c      	mov	r4, r1
 8003060:	b913      	cbnz	r3, 8003068 <_fflush_r+0x10>
 8003062:	2500      	movs	r5, #0
 8003064:	4628      	mov	r0, r5
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	b118      	cbz	r0, 8003072 <_fflush_r+0x1a>
 800306a:	6983      	ldr	r3, [r0, #24]
 800306c:	b90b      	cbnz	r3, 8003072 <_fflush_r+0x1a>
 800306e:	f000 f887 	bl	8003180 <__sinit>
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <_fflush_r+0x6c>)
 8003074:	429c      	cmp	r4, r3
 8003076:	d11b      	bne.n	80030b0 <_fflush_r+0x58>
 8003078:	686c      	ldr	r4, [r5, #4]
 800307a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ef      	beq.n	8003062 <_fflush_r+0xa>
 8003082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003084:	07d0      	lsls	r0, r2, #31
 8003086:	d404      	bmi.n	8003092 <_fflush_r+0x3a>
 8003088:	0599      	lsls	r1, r3, #22
 800308a:	d402      	bmi.n	8003092 <_fflush_r+0x3a>
 800308c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800308e:	f000 f915 	bl	80032bc <__retarget_lock_acquire_recursive>
 8003092:	4628      	mov	r0, r5
 8003094:	4621      	mov	r1, r4
 8003096:	f7ff ff59 	bl	8002f4c <__sflush_r>
 800309a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800309c:	4605      	mov	r5, r0
 800309e:	07da      	lsls	r2, r3, #31
 80030a0:	d4e0      	bmi.n	8003064 <_fflush_r+0xc>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	059b      	lsls	r3, r3, #22
 80030a6:	d4dd      	bmi.n	8003064 <_fflush_r+0xc>
 80030a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030aa:	f000 f908 	bl	80032be <__retarget_lock_release_recursive>
 80030ae:	e7d9      	b.n	8003064 <_fflush_r+0xc>
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <_fflush_r+0x70>)
 80030b2:	429c      	cmp	r4, r3
 80030b4:	d101      	bne.n	80030ba <_fflush_r+0x62>
 80030b6:	68ac      	ldr	r4, [r5, #8]
 80030b8:	e7df      	b.n	800307a <_fflush_r+0x22>
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <_fflush_r+0x74>)
 80030bc:	429c      	cmp	r4, r3
 80030be:	bf08      	it	eq
 80030c0:	68ec      	ldreq	r4, [r5, #12]
 80030c2:	e7da      	b.n	800307a <_fflush_r+0x22>
 80030c4:	08003704 	.word	0x08003704
 80030c8:	08003724 	.word	0x08003724
 80030cc:	080036e4 	.word	0x080036e4

080030d0 <std>:
 80030d0:	2300      	movs	r3, #0
 80030d2:	b510      	push	{r4, lr}
 80030d4:	4604      	mov	r4, r0
 80030d6:	e9c0 3300 	strd	r3, r3, [r0]
 80030da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030de:	6083      	str	r3, [r0, #8]
 80030e0:	8181      	strh	r1, [r0, #12]
 80030e2:	6643      	str	r3, [r0, #100]	; 0x64
 80030e4:	81c2      	strh	r2, [r0, #14]
 80030e6:	6183      	str	r3, [r0, #24]
 80030e8:	4619      	mov	r1, r3
 80030ea:	2208      	movs	r2, #8
 80030ec:	305c      	adds	r0, #92	; 0x5c
 80030ee:	f7ff fdef 	bl	8002cd0 <memset>
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <std+0x38>)
 80030f4:	6224      	str	r4, [r4, #32]
 80030f6:	6263      	str	r3, [r4, #36]	; 0x24
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <std+0x3c>)
 80030fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <std+0x40>)
 80030fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <std+0x44>)
 8003102:	6323      	str	r3, [r4, #48]	; 0x30
 8003104:	bd10      	pop	{r4, pc}
 8003106:	bf00      	nop
 8003108:	080034f5 	.word	0x080034f5
 800310c:	08003517 	.word	0x08003517
 8003110:	0800354f 	.word	0x0800354f
 8003114:	08003573 	.word	0x08003573

08003118 <_cleanup_r>:
 8003118:	4901      	ldr	r1, [pc, #4]	; (8003120 <_cleanup_r+0x8>)
 800311a:	f000 b8af 	b.w	800327c <_fwalk_reent>
 800311e:	bf00      	nop
 8003120:	08003059 	.word	0x08003059

08003124 <__sfmoreglue>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	2568      	movs	r5, #104	; 0x68
 8003128:	1e4a      	subs	r2, r1, #1
 800312a:	4355      	muls	r5, r2
 800312c:	460e      	mov	r6, r1
 800312e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003132:	f000 f975 	bl	8003420 <_malloc_r>
 8003136:	4604      	mov	r4, r0
 8003138:	b140      	cbz	r0, 800314c <__sfmoreglue+0x28>
 800313a:	2100      	movs	r1, #0
 800313c:	e9c0 1600 	strd	r1, r6, [r0]
 8003140:	300c      	adds	r0, #12
 8003142:	60a0      	str	r0, [r4, #8]
 8003144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003148:	f7ff fdc2 	bl	8002cd0 <memset>
 800314c:	4620      	mov	r0, r4
 800314e:	bd70      	pop	{r4, r5, r6, pc}

08003150 <__sfp_lock_acquire>:
 8003150:	4801      	ldr	r0, [pc, #4]	; (8003158 <__sfp_lock_acquire+0x8>)
 8003152:	f000 b8b3 	b.w	80032bc <__retarget_lock_acquire_recursive>
 8003156:	bf00      	nop
 8003158:	200001c0 	.word	0x200001c0

0800315c <__sfp_lock_release>:
 800315c:	4801      	ldr	r0, [pc, #4]	; (8003164 <__sfp_lock_release+0x8>)
 800315e:	f000 b8ae 	b.w	80032be <__retarget_lock_release_recursive>
 8003162:	bf00      	nop
 8003164:	200001c0 	.word	0x200001c0

08003168 <__sinit_lock_acquire>:
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <__sinit_lock_acquire+0x8>)
 800316a:	f000 b8a7 	b.w	80032bc <__retarget_lock_acquire_recursive>
 800316e:	bf00      	nop
 8003170:	200001bb 	.word	0x200001bb

08003174 <__sinit_lock_release>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__sinit_lock_release+0x8>)
 8003176:	f000 b8a2 	b.w	80032be <__retarget_lock_release_recursive>
 800317a:	bf00      	nop
 800317c:	200001bb 	.word	0x200001bb

08003180 <__sinit>:
 8003180:	b510      	push	{r4, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	f7ff fff0 	bl	8003168 <__sinit_lock_acquire>
 8003188:	69a3      	ldr	r3, [r4, #24]
 800318a:	b11b      	cbz	r3, 8003194 <__sinit+0x14>
 800318c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003190:	f7ff bff0 	b.w	8003174 <__sinit_lock_release>
 8003194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003198:	6523      	str	r3, [r4, #80]	; 0x50
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <__sinit+0x68>)
 800319c:	4a13      	ldr	r2, [pc, #76]	; (80031ec <__sinit+0x6c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80031a2:	42a3      	cmp	r3, r4
 80031a4:	bf08      	it	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	4620      	mov	r0, r4
 80031aa:	bf08      	it	eq
 80031ac:	61a3      	streq	r3, [r4, #24]
 80031ae:	f000 f81f 	bl	80031f0 <__sfp>
 80031b2:	6060      	str	r0, [r4, #4]
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 f81b 	bl	80031f0 <__sfp>
 80031ba:	60a0      	str	r0, [r4, #8]
 80031bc:	4620      	mov	r0, r4
 80031be:	f000 f817 	bl	80031f0 <__sfp>
 80031c2:	2200      	movs	r2, #0
 80031c4:	2104      	movs	r1, #4
 80031c6:	60e0      	str	r0, [r4, #12]
 80031c8:	6860      	ldr	r0, [r4, #4]
 80031ca:	f7ff ff81 	bl	80030d0 <std>
 80031ce:	2201      	movs	r2, #1
 80031d0:	2109      	movs	r1, #9
 80031d2:	68a0      	ldr	r0, [r4, #8]
 80031d4:	f7ff ff7c 	bl	80030d0 <std>
 80031d8:	2202      	movs	r2, #2
 80031da:	2112      	movs	r1, #18
 80031dc:	68e0      	ldr	r0, [r4, #12]
 80031de:	f7ff ff77 	bl	80030d0 <std>
 80031e2:	2301      	movs	r3, #1
 80031e4:	61a3      	str	r3, [r4, #24]
 80031e6:	e7d1      	b.n	800318c <__sinit+0xc>
 80031e8:	080036e0 	.word	0x080036e0
 80031ec:	08003119 	.word	0x08003119

080031f0 <__sfp>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	4607      	mov	r7, r0
 80031f4:	f7ff ffac 	bl	8003150 <__sfp_lock_acquire>
 80031f8:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <__sfp+0x84>)
 80031fa:	681e      	ldr	r6, [r3, #0]
 80031fc:	69b3      	ldr	r3, [r6, #24]
 80031fe:	b913      	cbnz	r3, 8003206 <__sfp+0x16>
 8003200:	4630      	mov	r0, r6
 8003202:	f7ff ffbd 	bl	8003180 <__sinit>
 8003206:	3648      	adds	r6, #72	; 0x48
 8003208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800320c:	3b01      	subs	r3, #1
 800320e:	d503      	bpl.n	8003218 <__sfp+0x28>
 8003210:	6833      	ldr	r3, [r6, #0]
 8003212:	b30b      	cbz	r3, 8003258 <__sfp+0x68>
 8003214:	6836      	ldr	r6, [r6, #0]
 8003216:	e7f7      	b.n	8003208 <__sfp+0x18>
 8003218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800321c:	b9d5      	cbnz	r5, 8003254 <__sfp+0x64>
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <__sfp+0x88>)
 8003220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003224:	60e3      	str	r3, [r4, #12]
 8003226:	6665      	str	r5, [r4, #100]	; 0x64
 8003228:	f000 f847 	bl	80032ba <__retarget_lock_init_recursive>
 800322c:	f7ff ff96 	bl	800315c <__sfp_lock_release>
 8003230:	2208      	movs	r2, #8
 8003232:	4629      	mov	r1, r5
 8003234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800323c:	6025      	str	r5, [r4, #0]
 800323e:	61a5      	str	r5, [r4, #24]
 8003240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003244:	f7ff fd44 	bl	8002cd0 <memset>
 8003248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800324c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003250:	4620      	mov	r0, r4
 8003252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003254:	3468      	adds	r4, #104	; 0x68
 8003256:	e7d9      	b.n	800320c <__sfp+0x1c>
 8003258:	2104      	movs	r1, #4
 800325a:	4638      	mov	r0, r7
 800325c:	f7ff ff62 	bl	8003124 <__sfmoreglue>
 8003260:	4604      	mov	r4, r0
 8003262:	6030      	str	r0, [r6, #0]
 8003264:	2800      	cmp	r0, #0
 8003266:	d1d5      	bne.n	8003214 <__sfp+0x24>
 8003268:	f7ff ff78 	bl	800315c <__sfp_lock_release>
 800326c:	230c      	movs	r3, #12
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	e7ee      	b.n	8003250 <__sfp+0x60>
 8003272:	bf00      	nop
 8003274:	080036e0 	.word	0x080036e0
 8003278:	ffff0001 	.word	0xffff0001

0800327c <_fwalk_reent>:
 800327c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003280:	4606      	mov	r6, r0
 8003282:	4688      	mov	r8, r1
 8003284:	2700      	movs	r7, #0
 8003286:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800328a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800328e:	f1b9 0901 	subs.w	r9, r9, #1
 8003292:	d505      	bpl.n	80032a0 <_fwalk_reent+0x24>
 8003294:	6824      	ldr	r4, [r4, #0]
 8003296:	2c00      	cmp	r4, #0
 8003298:	d1f7      	bne.n	800328a <_fwalk_reent+0xe>
 800329a:	4638      	mov	r0, r7
 800329c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032a0:	89ab      	ldrh	r3, [r5, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d907      	bls.n	80032b6 <_fwalk_reent+0x3a>
 80032a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032aa:	3301      	adds	r3, #1
 80032ac:	d003      	beq.n	80032b6 <_fwalk_reent+0x3a>
 80032ae:	4629      	mov	r1, r5
 80032b0:	4630      	mov	r0, r6
 80032b2:	47c0      	blx	r8
 80032b4:	4307      	orrs	r7, r0
 80032b6:	3568      	adds	r5, #104	; 0x68
 80032b8:	e7e9      	b.n	800328e <_fwalk_reent+0x12>

080032ba <__retarget_lock_init_recursive>:
 80032ba:	4770      	bx	lr

080032bc <__retarget_lock_acquire_recursive>:
 80032bc:	4770      	bx	lr

080032be <__retarget_lock_release_recursive>:
 80032be:	4770      	bx	lr

080032c0 <__swhatbuf_r>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	460e      	mov	r6, r1
 80032c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c8:	4614      	mov	r4, r2
 80032ca:	2900      	cmp	r1, #0
 80032cc:	461d      	mov	r5, r3
 80032ce:	b096      	sub	sp, #88	; 0x58
 80032d0:	da07      	bge.n	80032e2 <__swhatbuf_r+0x22>
 80032d2:	2300      	movs	r3, #0
 80032d4:	602b      	str	r3, [r5, #0]
 80032d6:	89b3      	ldrh	r3, [r6, #12]
 80032d8:	061a      	lsls	r2, r3, #24
 80032da:	d410      	bmi.n	80032fe <__swhatbuf_r+0x3e>
 80032dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e0:	e00e      	b.n	8003300 <__swhatbuf_r+0x40>
 80032e2:	466a      	mov	r2, sp
 80032e4:	f000 f96c 	bl	80035c0 <_fstat_r>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	dbf2      	blt.n	80032d2 <__swhatbuf_r+0x12>
 80032ec:	9a01      	ldr	r2, [sp, #4]
 80032ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032f6:	425a      	negs	r2, r3
 80032f8:	415a      	adcs	r2, r3
 80032fa:	602a      	str	r2, [r5, #0]
 80032fc:	e7ee      	b.n	80032dc <__swhatbuf_r+0x1c>
 80032fe:	2340      	movs	r3, #64	; 0x40
 8003300:	2000      	movs	r0, #0
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	b016      	add	sp, #88	; 0x58
 8003306:	bd70      	pop	{r4, r5, r6, pc}

08003308 <__smakebuf_r>:
 8003308:	898b      	ldrh	r3, [r1, #12]
 800330a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800330c:	079d      	lsls	r5, r3, #30
 800330e:	4606      	mov	r6, r0
 8003310:	460c      	mov	r4, r1
 8003312:	d507      	bpl.n	8003324 <__smakebuf_r+0x1c>
 8003314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003318:	6023      	str	r3, [r4, #0]
 800331a:	6123      	str	r3, [r4, #16]
 800331c:	2301      	movs	r3, #1
 800331e:	6163      	str	r3, [r4, #20]
 8003320:	b002      	add	sp, #8
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	466a      	mov	r2, sp
 8003326:	ab01      	add	r3, sp, #4
 8003328:	f7ff ffca 	bl	80032c0 <__swhatbuf_r>
 800332c:	9900      	ldr	r1, [sp, #0]
 800332e:	4605      	mov	r5, r0
 8003330:	4630      	mov	r0, r6
 8003332:	f000 f875 	bl	8003420 <_malloc_r>
 8003336:	b948      	cbnz	r0, 800334c <__smakebuf_r+0x44>
 8003338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800333c:	059a      	lsls	r2, r3, #22
 800333e:	d4ef      	bmi.n	8003320 <__smakebuf_r+0x18>
 8003340:	f023 0303 	bic.w	r3, r3, #3
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	e7e3      	b.n	8003314 <__smakebuf_r+0xc>
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <__smakebuf_r+0x7c>)
 800334e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	6020      	str	r0, [r4, #0]
 8003354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003358:	81a3      	strh	r3, [r4, #12]
 800335a:	9b00      	ldr	r3, [sp, #0]
 800335c:	6120      	str	r0, [r4, #16]
 800335e:	6163      	str	r3, [r4, #20]
 8003360:	9b01      	ldr	r3, [sp, #4]
 8003362:	b15b      	cbz	r3, 800337c <__smakebuf_r+0x74>
 8003364:	4630      	mov	r0, r6
 8003366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800336a:	f000 f93b 	bl	80035e4 <_isatty_r>
 800336e:	b128      	cbz	r0, 800337c <__smakebuf_r+0x74>
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	81a3      	strh	r3, [r4, #12]
 800337c:	89a0      	ldrh	r0, [r4, #12]
 800337e:	4305      	orrs	r5, r0
 8003380:	81a5      	strh	r5, [r4, #12]
 8003382:	e7cd      	b.n	8003320 <__smakebuf_r+0x18>
 8003384:	08003119 	.word	0x08003119

08003388 <_free_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4605      	mov	r5, r0
 800338c:	2900      	cmp	r1, #0
 800338e:	d043      	beq.n	8003418 <_free_r+0x90>
 8003390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003394:	1f0c      	subs	r4, r1, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfb8      	it	lt
 800339a:	18e4      	addlt	r4, r4, r3
 800339c:	f000 f944 	bl	8003628 <__malloc_lock>
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <_free_r+0x94>)
 80033a2:	6813      	ldr	r3, [r2, #0]
 80033a4:	4610      	mov	r0, r2
 80033a6:	b933      	cbnz	r3, 80033b6 <_free_r+0x2e>
 80033a8:	6063      	str	r3, [r4, #4]
 80033aa:	6014      	str	r4, [r2, #0]
 80033ac:	4628      	mov	r0, r5
 80033ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b2:	f000 b93f 	b.w	8003634 <__malloc_unlock>
 80033b6:	42a3      	cmp	r3, r4
 80033b8:	d90a      	bls.n	80033d0 <_free_r+0x48>
 80033ba:	6821      	ldr	r1, [r4, #0]
 80033bc:	1862      	adds	r2, r4, r1
 80033be:	4293      	cmp	r3, r2
 80033c0:	bf01      	itttt	eq
 80033c2:	681a      	ldreq	r2, [r3, #0]
 80033c4:	685b      	ldreq	r3, [r3, #4]
 80033c6:	1852      	addeq	r2, r2, r1
 80033c8:	6022      	streq	r2, [r4, #0]
 80033ca:	6063      	str	r3, [r4, #4]
 80033cc:	6004      	str	r4, [r0, #0]
 80033ce:	e7ed      	b.n	80033ac <_free_r+0x24>
 80033d0:	461a      	mov	r2, r3
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	b10b      	cbz	r3, 80033da <_free_r+0x52>
 80033d6:	42a3      	cmp	r3, r4
 80033d8:	d9fa      	bls.n	80033d0 <_free_r+0x48>
 80033da:	6811      	ldr	r1, [r2, #0]
 80033dc:	1850      	adds	r0, r2, r1
 80033de:	42a0      	cmp	r0, r4
 80033e0:	d10b      	bne.n	80033fa <_free_r+0x72>
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	4401      	add	r1, r0
 80033e6:	1850      	adds	r0, r2, r1
 80033e8:	4283      	cmp	r3, r0
 80033ea:	6011      	str	r1, [r2, #0]
 80033ec:	d1de      	bne.n	80033ac <_free_r+0x24>
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4401      	add	r1, r0
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	6053      	str	r3, [r2, #4]
 80033f8:	e7d8      	b.n	80033ac <_free_r+0x24>
 80033fa:	d902      	bls.n	8003402 <_free_r+0x7a>
 80033fc:	230c      	movs	r3, #12
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	e7d4      	b.n	80033ac <_free_r+0x24>
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	1821      	adds	r1, r4, r0
 8003406:	428b      	cmp	r3, r1
 8003408:	bf01      	itttt	eq
 800340a:	6819      	ldreq	r1, [r3, #0]
 800340c:	685b      	ldreq	r3, [r3, #4]
 800340e:	1809      	addeq	r1, r1, r0
 8003410:	6021      	streq	r1, [r4, #0]
 8003412:	6063      	str	r3, [r4, #4]
 8003414:	6054      	str	r4, [r2, #4]
 8003416:	e7c9      	b.n	80033ac <_free_r+0x24>
 8003418:	bd38      	pop	{r3, r4, r5, pc}
 800341a:	bf00      	nop
 800341c:	2000009c 	.word	0x2000009c

08003420 <_malloc_r>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	1ccd      	adds	r5, r1, #3
 8003424:	f025 0503 	bic.w	r5, r5, #3
 8003428:	3508      	adds	r5, #8
 800342a:	2d0c      	cmp	r5, #12
 800342c:	bf38      	it	cc
 800342e:	250c      	movcc	r5, #12
 8003430:	2d00      	cmp	r5, #0
 8003432:	4606      	mov	r6, r0
 8003434:	db01      	blt.n	800343a <_malloc_r+0x1a>
 8003436:	42a9      	cmp	r1, r5
 8003438:	d903      	bls.n	8003442 <_malloc_r+0x22>
 800343a:	230c      	movs	r3, #12
 800343c:	6033      	str	r3, [r6, #0]
 800343e:	2000      	movs	r0, #0
 8003440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003442:	f000 f8f1 	bl	8003628 <__malloc_lock>
 8003446:	4921      	ldr	r1, [pc, #132]	; (80034cc <_malloc_r+0xac>)
 8003448:	680a      	ldr	r2, [r1, #0]
 800344a:	4614      	mov	r4, r2
 800344c:	b99c      	cbnz	r4, 8003476 <_malloc_r+0x56>
 800344e:	4f20      	ldr	r7, [pc, #128]	; (80034d0 <_malloc_r+0xb0>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b923      	cbnz	r3, 800345e <_malloc_r+0x3e>
 8003454:	4621      	mov	r1, r4
 8003456:	4630      	mov	r0, r6
 8003458:	f000 f83c 	bl	80034d4 <_sbrk_r>
 800345c:	6038      	str	r0, [r7, #0]
 800345e:	4629      	mov	r1, r5
 8003460:	4630      	mov	r0, r6
 8003462:	f000 f837 	bl	80034d4 <_sbrk_r>
 8003466:	1c43      	adds	r3, r0, #1
 8003468:	d123      	bne.n	80034b2 <_malloc_r+0x92>
 800346a:	230c      	movs	r3, #12
 800346c:	4630      	mov	r0, r6
 800346e:	6033      	str	r3, [r6, #0]
 8003470:	f000 f8e0 	bl	8003634 <__malloc_unlock>
 8003474:	e7e3      	b.n	800343e <_malloc_r+0x1e>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	1b5b      	subs	r3, r3, r5
 800347a:	d417      	bmi.n	80034ac <_malloc_r+0x8c>
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d903      	bls.n	8003488 <_malloc_r+0x68>
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	441c      	add	r4, r3
 8003484:	6025      	str	r5, [r4, #0]
 8003486:	e004      	b.n	8003492 <_malloc_r+0x72>
 8003488:	6863      	ldr	r3, [r4, #4]
 800348a:	42a2      	cmp	r2, r4
 800348c:	bf0c      	ite	eq
 800348e:	600b      	streq	r3, [r1, #0]
 8003490:	6053      	strne	r3, [r2, #4]
 8003492:	4630      	mov	r0, r6
 8003494:	f000 f8ce 	bl	8003634 <__malloc_unlock>
 8003498:	f104 000b 	add.w	r0, r4, #11
 800349c:	1d23      	adds	r3, r4, #4
 800349e:	f020 0007 	bic.w	r0, r0, #7
 80034a2:	1ac2      	subs	r2, r0, r3
 80034a4:	d0cc      	beq.n	8003440 <_malloc_r+0x20>
 80034a6:	1a1b      	subs	r3, r3, r0
 80034a8:	50a3      	str	r3, [r4, r2]
 80034aa:	e7c9      	b.n	8003440 <_malloc_r+0x20>
 80034ac:	4622      	mov	r2, r4
 80034ae:	6864      	ldr	r4, [r4, #4]
 80034b0:	e7cc      	b.n	800344c <_malloc_r+0x2c>
 80034b2:	1cc4      	adds	r4, r0, #3
 80034b4:	f024 0403 	bic.w	r4, r4, #3
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d0e3      	beq.n	8003484 <_malloc_r+0x64>
 80034bc:	1a21      	subs	r1, r4, r0
 80034be:	4630      	mov	r0, r6
 80034c0:	f000 f808 	bl	80034d4 <_sbrk_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d1dd      	bne.n	8003484 <_malloc_r+0x64>
 80034c8:	e7cf      	b.n	800346a <_malloc_r+0x4a>
 80034ca:	bf00      	nop
 80034cc:	2000009c 	.word	0x2000009c
 80034d0:	200000a0 	.word	0x200000a0

080034d4 <_sbrk_r>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	2300      	movs	r3, #0
 80034d8:	4d05      	ldr	r5, [pc, #20]	; (80034f0 <_sbrk_r+0x1c>)
 80034da:	4604      	mov	r4, r0
 80034dc:	4608      	mov	r0, r1
 80034de:	602b      	str	r3, [r5, #0]
 80034e0:	f7fd fc54 	bl	8000d8c <_sbrk>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	d102      	bne.n	80034ee <_sbrk_r+0x1a>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	b103      	cbz	r3, 80034ee <_sbrk_r+0x1a>
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	bd38      	pop	{r3, r4, r5, pc}
 80034f0:	200001c4 	.word	0x200001c4

080034f4 <__sread>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	460c      	mov	r4, r1
 80034f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fc:	f000 f8a0 	bl	8003640 <_read_r>
 8003500:	2800      	cmp	r0, #0
 8003502:	bfab      	itete	ge
 8003504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003506:	89a3      	ldrhlt	r3, [r4, #12]
 8003508:	181b      	addge	r3, r3, r0
 800350a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800350e:	bfac      	ite	ge
 8003510:	6563      	strge	r3, [r4, #84]	; 0x54
 8003512:	81a3      	strhlt	r3, [r4, #12]
 8003514:	bd10      	pop	{r4, pc}

08003516 <__swrite>:
 8003516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351a:	461f      	mov	r7, r3
 800351c:	898b      	ldrh	r3, [r1, #12]
 800351e:	4605      	mov	r5, r0
 8003520:	05db      	lsls	r3, r3, #23
 8003522:	460c      	mov	r4, r1
 8003524:	4616      	mov	r6, r2
 8003526:	d505      	bpl.n	8003534 <__swrite+0x1e>
 8003528:	2302      	movs	r3, #2
 800352a:	2200      	movs	r2, #0
 800352c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003530:	f000 f868 	bl	8003604 <_lseek_r>
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	4632      	mov	r2, r6
 8003538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	4628      	mov	r0, r5
 8003540:	463b      	mov	r3, r7
 8003542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	f000 b817 	b.w	800357c <_write_r>

0800354e <__sseek>:
 800354e:	b510      	push	{r4, lr}
 8003550:	460c      	mov	r4, r1
 8003552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003556:	f000 f855 	bl	8003604 <_lseek_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	bf15      	itete	ne
 8003560:	6560      	strne	r0, [r4, #84]	; 0x54
 8003562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800356a:	81a3      	strheq	r3, [r4, #12]
 800356c:	bf18      	it	ne
 800356e:	81a3      	strhne	r3, [r4, #12]
 8003570:	bd10      	pop	{r4, pc}

08003572 <__sclose>:
 8003572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003576:	f000 b813 	b.w	80035a0 <_close_r>
	...

0800357c <_write_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	2200      	movs	r2, #0
 8003586:	4d05      	ldr	r5, [pc, #20]	; (800359c <_write_r+0x20>)
 8003588:	602a      	str	r2, [r5, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f7fd f85e 	bl	800064c <_write>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_write_r+0x1e>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	b103      	cbz	r3, 800359a <_write_r+0x1e>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	200001c4 	.word	0x200001c4

080035a0 <_close_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	2300      	movs	r3, #0
 80035a4:	4d05      	ldr	r5, [pc, #20]	; (80035bc <_close_r+0x1c>)
 80035a6:	4604      	mov	r4, r0
 80035a8:	4608      	mov	r0, r1
 80035aa:	602b      	str	r3, [r5, #0]
 80035ac:	f7fd fbbd 	bl	8000d2a <_close>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_close_r+0x1a>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_close_r+0x1a>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	200001c4 	.word	0x200001c4

080035c0 <_fstat_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	2300      	movs	r3, #0
 80035c4:	4d06      	ldr	r5, [pc, #24]	; (80035e0 <_fstat_r+0x20>)
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	f7fd fbb7 	bl	8000d40 <_fstat>
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	d102      	bne.n	80035dc <_fstat_r+0x1c>
 80035d6:	682b      	ldr	r3, [r5, #0]
 80035d8:	b103      	cbz	r3, 80035dc <_fstat_r+0x1c>
 80035da:	6023      	str	r3, [r4, #0]
 80035dc:	bd38      	pop	{r3, r4, r5, pc}
 80035de:	bf00      	nop
 80035e0:	200001c4 	.word	0x200001c4

080035e4 <_isatty_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	2300      	movs	r3, #0
 80035e8:	4d05      	ldr	r5, [pc, #20]	; (8003600 <_isatty_r+0x1c>)
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	f7fd fbb5 	bl	8000d5e <_isatty>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_isatty_r+0x1a>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_isatty_r+0x1a>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	200001c4 	.word	0x200001c4

08003604 <_lseek_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	2200      	movs	r2, #0
 800360e:	4d05      	ldr	r5, [pc, #20]	; (8003624 <_lseek_r+0x20>)
 8003610:	602a      	str	r2, [r5, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f7fd fbad 	bl	8000d72 <_lseek>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_lseek_r+0x1e>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_lseek_r+0x1e>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	200001c4 	.word	0x200001c4

08003628 <__malloc_lock>:
 8003628:	4801      	ldr	r0, [pc, #4]	; (8003630 <__malloc_lock+0x8>)
 800362a:	f7ff be47 	b.w	80032bc <__retarget_lock_acquire_recursive>
 800362e:	bf00      	nop
 8003630:	200001bc 	.word	0x200001bc

08003634 <__malloc_unlock>:
 8003634:	4801      	ldr	r0, [pc, #4]	; (800363c <__malloc_unlock+0x8>)
 8003636:	f7ff be42 	b.w	80032be <__retarget_lock_release_recursive>
 800363a:	bf00      	nop
 800363c:	200001bc 	.word	0x200001bc

08003640 <_read_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4604      	mov	r4, r0
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	2200      	movs	r2, #0
 800364a:	4d05      	ldr	r5, [pc, #20]	; (8003660 <_read_r+0x20>)
 800364c:	602a      	str	r2, [r5, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f7fd fb4e 	bl	8000cf0 <_read>
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	d102      	bne.n	800365e <_read_r+0x1e>
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	b103      	cbz	r3, 800365e <_read_r+0x1e>
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	200001c4 	.word	0x200001c4

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
